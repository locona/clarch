// Code generated by go-bindata.
// sources:
// clarch/templates/add.tpl
// clarch/templates/cmd/api.tpl
// clarch/templates/cmd/root.tpl
// clarch/templates/handler/http/hander_test.tpl
// clarch/templates/handler/http/http.tpl
// clarch/templates/handler/http/params.tpl
// clarch/templates/infra/mysql.tpl
// clarch/templates/infra/redis.tpl
// clarch/templates/main.tpl
// clarch/templates/model.tpl
// clarch/templates/project/config.tpl
// clarch/templates/project/handler.tpl
// clarch/templates/project/logger/logger.tpl
// clarch/templates/project/middleware/middleware.tpl
// clarch/templates/project/repository.tpl
// clarch/templates/project/validator/validator.tpl
// clarch/templates/repository/repository.tpl
// clarch/templates/usecase/usecase.tpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clarchTemplatesAddTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xd1\xb1\x6a\x87\x30\x10\x06\xf0\xb9\x79\x8a\xe0\xe4\x1f\x4a\xb2\x17\x3a\x65\x71\x69\x29\x85\x3c\x40\x6a\xaf\x1a\xaa\x26\xbd\x9c\x14\x09\x79\xf7\x62\x63\x35\xc5\xcd\x4d\xbf\xe4\xfb\x1d\x47\xa4\xe4\x76\xf4\x0e\x89\xc7\x28\x5e\x3e\xbb\x94\x02\xfb\xfb\x6a\xcc\xf4\x3e\x00\xf2\xaa\xb3\xd4\xcf\x6f\xa2\x75\xa3\x8c\x51\xa8\x19\x11\x26\xd2\x01\x30\xa5\x22\x78\x05\xef\x72\xf0\xdb\x96\x7d\xae\xcb\x9e\xc8\x57\x3b\xaa\xd5\x55\x6f\x0e\xd0\x9a\x00\x07\xb5\x5e\xb8\x8a\x21\x78\x17\x2c\x39\x5c\x2a\xc6\xa4\xdc\xb7\x67\x91\xdd\xfd\xf3\x1f\x1e\x79\xf9\x2f\x9e\xe1\x7b\x55\xcd\x08\xc3\x1e\x66\xa8\xb6\xd3\x07\x1a\xf1\xb4\x84\xaf\xe1\x76\x28\x5a\x95\x86\x56\x27\x41\xe7\xbd\xea\x72\x4c\xd1\xdf\x5e\xe1\x54\x6b\x88\xfc\x76\x56\x1b\x6f\xef\x8b\x11\x37\x96\xd8\x4f\x00\x00\x00\xff\xff\xb4\x57\xa7\x7b\xd9\x01\x00\x00")

func clarchTemplatesAddTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesAddTpl,
		"clarch/templates/add.tpl",
	)
}

func clarchTemplatesAddTpl() (*asset, error) {
	bytes, err := clarchTemplatesAddTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/add.tpl", size: 473, mode: os.FileMode(420), modTime: time.Unix(1524802023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesCmdApiTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x6f\xdb\x30\x0c\x3d\x5b\xbf\x82\xf0\x61\xb0\xb7\xcc\xc6\xb0\x5b\x80\x1e\xb2\x00\x43\x0b\x34\x45\x90\xa2\xbb\x0c\x3b\xa8\x16\x2d\x6b\x95\x45\x4f\x92\x1b\x04\x41\xfe\xfb\x40\x39\x49\x3f\xd6\xcb\x7a\x93\x1e\xc9\xc7\x67\xf2\xc9\x83\x6c\x1e\xa4\x46\x68\x7a\x25\x84\xe9\x07\xf2\x11\x0a\x91\xe5\xda\xc4\x6e\xbc\xaf\x1a\xea\xeb\xfd\xbe\x5a\x8e\xde\xa3\x8b\x77\x01\xfd\xe1\xf0\x0c\xd8\xe0\x40\x87\x43\x6d\x5c\xeb\x65\xfe\xbf\x55\x83\xa7\xdf\xd8\xc4\xf7\xd6\xd5\x96\xb4\x46\xff\xee\xf2\xde\x28\x65\x71\x2b\x3d\xbe\x9b\xe2\x51\x5a\xa3\x64\xa4\xd7\x22\xb4\x71\x9f\x35\x39\xd3\xf0\xe9\x55\x2c\x0c\xed\x97\xaf\x75\x43\xf7\x3c\xb1\x52\x88\xba\x06\x39\x98\x65\xaf\xc0\xe3\xe0\x31\xa0\x8b\x01\x62\x87\x8c\x42\x43\x7d\x2f\x9d\x12\x8f\xd2\x9f\xb2\x2e\xe0\x43\x2a\xae\x96\x53\x6c\x2f\xb2\xbb\x80\x73\x00\xc8\xe5\x60\xf2\x99\xc8\x6e\x3b\xf2\x71\x0e\x39\x9f\xaf\xc9\xe9\x39\x4c\xe7\xcd\xe8\xe6\xd0\x8e\xae\x29\x9a\x5e\xc1\xc7\x17\x2c\x33\x90\x5e\x07\xf8\xf9\x2b\x44\x6f\x9c\x2e\x61\x2f\xb2\xec\xda\x84\x88\x6e\x31\x98\xa2\x14\xd9\x61\x26\x0e\x42\x70\x39\x18\x67\x62\x91\x52\x3c\x51\x5c\xf6\xaa\x5a\x28\x75\x24\x2a\x26\x99\xa5\x10\xd9\x71\x4a\xd5\x95\x33\x71\x49\xae\x35\x9a\x79\xa6\xad\x25\xf0\x3a\x1d\x19\x3c\x0f\x32\xe1\x3f\x4e\x37\x0e\x25\x6f\x25\x78\xb5\x0b\x7f\xec\x4b\x68\x83\xca\x84\x82\x9b\xd5\x35\x5c\xa2\x47\xd8\xd1\x08\x5b\x63\x2d\x28\x6c\x8d\x4b\x77\x0f\xad\x95\x3a\x80\x74\x0a\x9a\xa4\x63\xf4\x32\x1a\x72\x10\x30\x46\xe3\x74\xa8\x26\x82\x25\x4f\x04\xc2\x38\xf0\x2b\x08\xb0\x46\x1f\xd2\x04\x22\x7c\x4f\x04\xdb\xce\x34\xdd\xc4\xbe\x25\xff\x00\x2d\x79\x88\x9d\x09\xe7\x35\x31\x09\x77\x91\xd6\x42\x18\xef\x8f\x70\x98\x01\x56\xba\x9a\x4f\xe1\x34\x9e\xea\x89\x3b\x51\x17\x65\x75\x9b\x06\x5f\xe4\x2d\x51\x3e\xe3\x85\x41\xbe\x80\x0e\xed\x90\xda\x30\x5a\xbe\xa9\xd2\x52\x23\xed\xf1\x0b\x9f\x09\x24\x67\x77\xe0\x47\x07\xdb\x0e\xdd\xbf\x2a\xf9\x2a\xad\x45\x05\xca\x78\x6c\xa2\xdd\xbd\x21\xf2\x24\xed\x1b\x91\x5d\x17\x79\x24\xad\x2d\xb2\xb0\x98\xcf\xa0\x95\x36\xe0\x0c\xf2\x4b\x96\xd8\x63\x08\xfc\x17\x49\x13\x99\xd2\xca\xb3\x5d\x9e\xd9\x88\x3d\xc3\xbe\x9e\x5f\x80\x36\xae\xba\xc1\x2d\xef\x53\x0e\xa6\xba\x94\x4e\x59\x5c\x61\xec\x48\xdd\x50\x5c\x58\x4b\x5b\x64\xb7\x47\x3f\xe2\x94\x72\x17\xb0\xe0\xaa\x93\x6d\xca\x97\xf0\x06\x1b\x7a\x44\xbf\xe3\x40\xfa\x8a\xa7\x07\x2e\x32\xb6\xf3\x74\xe7\xde\x4f\x11\x96\xb0\x3a\xdf\x58\xcc\x99\x73\x4a\xaa\x96\xe4\x43\xea\xf5\x3a\xc0\x32\x78\x63\x1c\x3b\x88\x93\x2b\x93\x49\x39\xb6\x22\x85\x05\x8b\x3f\xca\xdc\x8c\xae\xc8\xe7\x39\x7c\x82\xd3\xbb\x98\xde\x44\xb5\x58\x5f\x55\x6b\xf2\x91\x07\xf6\x37\x00\x00\xff\xff\x0d\xc0\x3e\xd0\x8e\x05\x00\x00")

func clarchTemplatesCmdApiTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesCmdApiTpl,
		"clarch/templates/cmd/api.tpl",
	)
}

func clarchTemplatesCmdApiTpl() (*asset, error) {
	bytes, err := clarchTemplatesCmdApiTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/cmd/api.tpl", size: 1422, mode: os.FileMode(420), modTime: time.Unix(1524802023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesCmdRootTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\xb1\x6a\xc3\x30\x10\x80\xe1\xf9\xee\x29\xae\x1a\x8a\x0d\x45\x21\x74\x4b\xf1\x64\xb2\x75\x28\x2d\x7d\x00\x45\x96\x1c\xd1\x48\x67\xce\xe7\x12\x10\x7a\xf7\xd2\x40\xbb\x65\xfe\xfe\xe1\x5f\x9c\xff\x72\x73\x20\x9f\x27\xc4\x94\x17\x16\xa5\x0e\xc1\xc4\xac\x06\xc1\xf0\x6a\x10\xc1\xcc\x49\xcf\xdb\xc9\x7a\xce\xbb\x75\x89\xfb\xe7\x9d\xe7\x93\x38\x83\x3d\xe2\xb7\x13\x12\x66\x1d\xf3\x44\x03\x3d\xde\xc0\x8e\x9c\xb3\x2b\x53\x45\xf8\x5c\xc3\x81\x88\x4c\xad\x76\xdc\x44\x42\xd1\xf7\xb0\x70\x6b\xe6\x09\xe1\xe3\xcc\xa2\x77\xf5\x95\xcb\x7c\x0f\x1b\x62\xdc\x8a\xa7\xe3\x35\xf8\x4d\x43\xd7\x53\x45\x48\x91\x82\x08\x1d\x86\xbf\x1f\xfb\xcf\x2f\x37\x79\x18\xa8\xa4\xcb\x6f\x0a\x31\xab\x7d\x93\x54\xf4\x52\xba\x20\xd2\x23\x00\xaf\xf6\x78\x4d\xda\xed\x7b\x84\x86\x0d\x7f\x02\x00\x00\xff\xff\x4b\xde\xb7\x01\x1a\x01\x00\x00")

func clarchTemplatesCmdRootTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesCmdRootTpl,
		"clarch/templates/cmd/root.tpl",
	)
}

func clarchTemplatesCmdRootTpl() (*asset, error) {
	bytes, err := clarchTemplatesCmdRootTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/cmd/root.tpl", size: 282, mode: os.FileMode(420), modTime: time.Unix(1524802023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesHandlerHttpHander_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\x4f\x6f\x9c\x3e\x10\x3d\xe3\x4f\x61\x71\xf8\x09\x22\x7e\x26\xe7\x48\x39\xa4\x64\xa3\x74\x5b\x25\xd1\x26\x7b\xaa\xaa\xca\x98\x59\x96\x05\x6c\x77\x3c\x34\x1b\x21\xbe\x7b\x65\xf6\x8f\x36\x74\x5b\xa9\xbd\x80\x99\x99\xe7\x79\xef\xf1\xac\x54\xb5\x2c\x81\xaf\x89\x2c\x63\x55\x6b\x0d\x12\x8f\x58\x10\x6a\xa0\xd4\x17\xc3\x93\xf3\xf8\x20\x70\xe4\x8b\xfe\x5d\xe9\x32\x64\x2c\x08\xcb\x8a\xd6\x5d\x2e\x94\x69\xd3\xbe\x17\x59\x87\x08\x9a\x96\x0e\x70\x18\x4e\x0a\x0b\xb0\x66\x18\xd2\x8d\xc9\xc3\x7f\xc0\xa4\x9d\x03\x25\x1d\xa4\xad\x51\xb5\x9b\xdc\x90\x6f\x95\x29\x40\xa5\x2b\x59\x03\x4e\x7a\x65\xa5\xff\x2f\x8d\xae\x94\x3f\x4d\x7a\xf5\x65\xdd\xe5\x9d\x4e\xad\x9d\x34\x1c\x21\x90\x5a\x63\x3a\xca\x5c\xbd\xa5\xd2\x39\x40\x0a\x59\xcc\xd8\xaa\xd3\x8a\xbf\x80\xa3\xbb\x4a\x17\x37\x4d\x13\x11\xbf\xd8\xbb\x21\x5e\x62\xde\xb3\xe0\x87\x44\xde\xf2\xbe\x17\x4f\x75\x39\x0c\xc2\xcb\x91\x2d\x34\xe3\x17\x0b\x00\x91\x5f\x5d\xf3\x91\xab\xb8\x93\x35\xdc\x4a\x92\xd1\x7f\x6d\xcc\x82\xdd\x16\xf1\x60\x66\x88\x06\x23\x4a\x38\x20\xc6\x8c\x05\x5e\xf4\x32\x93\x0e\x3c\x52\xc3\x6b\x34\xba\x20\xe6\x26\x5f\xee\x6c\x89\x77\x33\x73\x93\x7f\xae\x1c\xf9\xa9\x56\xd6\x10\x7d\xf9\x7a\x71\x9e\x46\xc2\x2f\x27\x90\x6b\x2e\xad\x05\x5d\x44\x27\xc5\x84\x8f\xb4\x8e\xdb\xc5\xa3\x8e\xc2\xbd\xec\x30\x16\x0b\xa0\x0e\xf5\x7b\x80\xae\x1a\x4f\x18\xc1\x79\x12\x87\xc4\x88\x07\x78\x5d\x80\x32\x58\x00\x46\x31\x0b\x54\xc2\xbf\xf9\x7e\x59\x69\x91\x21\x48\x02\x6f\x68\x66\x34\xc1\x96\x22\x04\x17\xb3\x60\x2d\x75\xd1\xc0\xe8\xd5\x3d\x91\x9d\x9b\xfc\x7e\x57\xe9\x59\x10\x1c\x54\x2d\xb3\x2b\x7e\xa4\x97\xb0\x60\x38\xe2\xc4\xe1\xf7\x28\xcf\xc7\x5a\xf1\x84\x95\xa6\x46\xef\x6f\xdf\x5b\x3d\xfb\xde\xc9\xc6\x1b\xed\x99\x8a\x67\x92\xd4\xb9\xc7\x4f\x09\x47\x70\x22\x33\x05\xbc\x53\x7f\x33\x62\x66\x5b\x0b\x8a\x24\x55\x46\xbb\x88\x62\x36\x4c\x22\xf1\xe1\xed\xe3\xed\xf9\x4c\x6c\xfe\x36\x13\x9b\xdf\x67\xe2\x74\xeb\x33\x19\x84\x5f\x56\x9e\x4e\x2c\x6d\x21\xe9\xcf\x23\xb7\xd0\xc0\xd9\x91\x9f\x01\x00\x00\xff\xff\x7d\x37\x65\x07\x24\x04\x00\x00")

func clarchTemplatesHandlerHttpHander_testTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesHandlerHttpHander_testTpl,
		"clarch/templates/handler/http/hander_test.tpl",
	)
}

func clarchTemplatesHandlerHttpHander_testTpl() (*asset, error) {
	bytes, err := clarchTemplatesHandlerHttpHander_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/handler/http/hander_test.tpl", size: 1060, mode: os.FileMode(420), modTime: time.Unix(1524802023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesHandlerHttpHttpTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x95\xdf\x4f\xdb\x30\x10\xc7\x9f\xed\xbf\xc2\xcb\xc3\x94\xa0\xce\x11\xaf\x9d\x78\x81\x56\xc0\x86\xa0\xa2\x74\x7b\xf6\x9c\x23\xf1\x48\x9d\xcc\xbe\x94\x4d\x51\xfe\xf7\xc9\x76\xf8\x51\x96\xc0\x2a\x36\x6d\xbc\xd0\xd8\xe7\xef\xdd\x7d\xbe\x27\xbb\x16\xf2\x46\xe4\xc0\x0a\xc4\x9a\x52\xb5\xae\x2b\x83\x2c\xa6\x24\xd2\x80\xa9\x5b\x8c\x28\x25\x51\xae\xb0\x68\xbe\x70\x59\xad\xd3\xb6\xe5\x47\x8d\x31\xa0\x71\x65\xc1\x74\xdd\xa3\x85\x4b\xa8\xab\xae\x4b\xd7\x55\x06\x65\xb4\xeb\xa9\xb6\xe5\x8b\x9b\xbc\xeb\xd2\xc6\x82\x14\x16\x76\x16\xa8\x4d\xf5\x15\x24\x3e\x39\x97\x2b\xfd\x2e\xaf\xb4\x92\xee\x57\x44\x13\x4a\x29\xfe\xa8\x81\x9d\x20\xd6\x4e\x42\xac\xa1\xf4\x79\x4f\x84\xce\x4a\x30\xcc\xa2\x69\x24\xb2\x96\x92\x5e\x90\xf7\x3b\x8b\xf0\x49\xc9\x5d\xa5\xab\x23\xd6\xd7\xca\xb7\x94\x56\x61\x91\x76\x94\x5e\x37\x5a\xb2\x18\x0b\x65\xd9\xde\x58\xc6\x84\x9d\x29\x8b\xb1\x64\x7b\xb9\xd2\xfc\xa8\xd2\x08\xdf\x31\x71\x05\xdc\x16\x60\x80\x4d\x0f\xd8\x5b\x8f\x74\x3b\x4b\xdb\x51\x52\x2a\x8b\x13\x06\xc6\xb8\x20\x97\x85\x3f\xd4\xc6\xbd\xaa\x97\x48\x28\x51\xd7\x3e\xec\xcd\x01\xd3\xaa\x74\xda\x44\xf2\x0f\xcb\x8b\xf3\xd8\x59\xcc\x97\x28\xb0\xb1\x87\x22\xbb\x84\x6f\x0d\xf4\x9a\x09\x25\xc4\x00\x36\x46\x53\xd2\x51\x3a\x70\xe0\xe2\xe3\x84\xb9\x12\x92\xdf\x6f\x75\x59\x54\xb7\x43\xad\xaa\xec\xbe\x85\x85\x30\x16\x4e\x67\xb1\x4c\x5e\x22\x70\x3a\x9b\x32\x95\x75\x94\x28\x84\xf5\x28\x07\x9f\xf2\x8f\x71\x18\xc1\xe0\x2a\xd8\x05\x03\x56\x06\x86\x38\xd4\xc2\x88\xb5\xf5\x1d\xfb\x98\x85\xff\x76\x5e\xf7\x95\xdf\x35\xf8\x49\x94\x2a\x13\x08\x87\x4a\x67\xbe\x20\x39\x61\xe1\x70\xf2\xfe\xd5\x56\x6f\x9e\x1b\x3a\x03\x76\x9c\xb5\xef\x6b\xf3\x17\x41\x1b\xb0\x3b\x70\x5e\xd5\x8e\xd1\x0b\xa0\x43\xd0\xbf\x21\x3d\x32\xf7\xe3\x06\x50\x42\xc2\xd8\x4f\x82\xc0\x73\x6e\xf4\xdd\xff\x3f\x76\xcc\xa0\x84\x61\x3b\x86\x39\xbc\x74\x01\xf4\x30\xdc\x5f\x0f\xe4\xa9\x79\x8f\x68\xf4\xc9\xc3\x4d\xf0\x5a\xe7\x88\xe4\x9f\x8d\x42\x30\xe1\xdf\x09\x88\x0c\xcc\x36\x9c\x07\x2e\xe7\x70\xbb\xcd\x03\xb1\xee\x99\xc4\x79\x60\x31\xd7\xb9\xd2\x30\x61\x8d\x7c\xf6\x4d\xf1\xac\x0a\xcf\x63\x8c\xb2\x6b\xe6\xa1\xeb\x29\x6b\x64\x00\xb3\xd9\x77\xc7\x72\x7e\x6c\xaa\xa6\x8e\xa3\x54\xd4\x2a\xdd\xec\x47\x6e\xd8\xf6\xf9\xf1\xfc\x2a\x8e\xee\x9f\x60\x1b\x4d\x58\xe1\xdf\x8f\xc1\xdd\x74\xaa\x32\x1f\xe1\x6e\xd6\x10\xb1\xb8\x58\xfe\x2a\xe0\x2f\x83\x7e\x7f\x35\xac\x10\x26\x34\xc4\xcc\xe6\x67\xf3\xab\xf9\x60\x58\xb0\xce\x01\xfd\x19\x00\x00\xff\xff\x39\x82\x4e\x9c\xaf\x08\x00\x00")

func clarchTemplatesHandlerHttpHttpTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesHandlerHttpHttpTpl,
		"clarch/templates/handler/http/http.tpl",
	)
}

func clarchTemplatesHandlerHttpHttpTpl() (*asset, error) {
	bytes, err := clarchTemplatesHandlerHttpHttpTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/handler/http/http.tpl", size: 2223, mode: os.FileMode(420), modTime: time.Unix(1524802023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesHandlerHttpParamsTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x28\x29\x29\xe0\xe2\x2a\xa9\x2c\x48\x55\x08\x2e\xc9\x2f\x4a\x0d\x48\x2c\x4a\xcc\x2d\x56\x28\x2e\x29\x2a\x4d\x2e\x51\xa8\xe6\xaa\x85\x4a\x86\x16\xa4\x24\x96\x60\x91\x05\x04\x00\x00\xff\xff\x84\xb0\x4f\x09\x48\x00\x00\x00")

func clarchTemplatesHandlerHttpParamsTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesHandlerHttpParamsTpl,
		"clarch/templates/handler/http/params.tpl",
	)
}

func clarchTemplatesHandlerHttpParamsTpl() (*asset, error) {
	bytes, err := clarchTemplatesHandlerHttpParamsTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/handler/http/params.tpl", size: 72, mode: os.FileMode(420), modTime: time.Unix(1524802023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesInfraMysqlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x51\x4d\x8b\xd5\x30\x14\x5d\xdf\xfb\x2b\xae\x81\x27\xad\x94\x76\xe3\x42\x1e\x14\xc5\x19\x45\xc1\x61\xf4\x8d\x2e\x5c\x49\xda\x26\x7d\x19\x9b\x0f\x93\x5b\x45\x1f\xfd\xef\xd2\x74\x06\x66\xd3\x55\x72\x73\x4e\x4e\xce\x39\x09\xb2\xff\x29\x47\x45\xc6\xe9\x28\x11\x8d\x0d\x3e\x32\x15\x08\x42\x5b\x16\x08\x62\xf2\xa3\x40\x84\xde\x3b\x6d\x46\x12\xa3\xe1\xf3\xdc\xd5\xbd\xb7\xcd\xe5\x52\x5f\xcd\x31\x2a\xc7\xdf\x92\x8a\xcb\xf2\xe4\xe0\xa4\x82\x5f\x96\x26\x44\x7f\xaf\xfa\x2c\xf3\xe4\xde\xbd\x71\xff\xce\x73\x33\xfa\x68\x05\xc2\x0f\xda\xc1\x9a\xc1\xc8\x49\xf5\x9c\x1a\xfb\x37\xfd\x9a\x04\x96\x88\xbf\x65\xa4\x9b\x75\xa2\x17\x2b\xa5\xbe\x7e\x8b\xa8\x67\xd7\xd3\x47\x67\x38\x03\x45\x49\x17\x84\xb3\x4f\x4c\xc7\x96\x36\xd7\xf5\xd5\xb6\x64\x42\xfd\xc1\x27\x46\xc8\x31\x77\x18\x9f\x7d\x64\x84\x39\xa9\xb8\xc7\x58\x03\x23\x04\x99\xd2\x1f\x1f\x87\x5d\x9d\x07\x1c\x61\x90\x2c\x3b\x99\xd4\x1e\xf3\xfa\x01\x47\x18\xba\x8a\x54\xcc\x0f\xe7\x84\xb7\x41\xb9\x42\x6c\x0d\x54\xa4\x2d\xd7\x77\x21\x1a\xc7\xba\x40\x00\x71\x48\xc7\x43\x7a\xc3\x7d\x28\xf2\xae\x6c\x0e\xe9\x75\x90\x31\xa9\xaf\xc6\xaa\x96\xe3\xac\x9e\xf7\xe7\x75\xe6\x76\x66\xfd\xca\x76\x2f\x45\x85\x90\xa3\x55\xf4\x68\xbf\xa2\xb5\xae\x8a\xd6\x4a\x2a\x7a\xb4\x5a\x21\x94\x25\x22\x18\x9d\xfd\x3c\x6b\xc9\x99\x69\xed\x16\x26\x3f\xd6\xef\x25\xcb\xa9\x10\x37\xdf\xef\xbe\x7c\xa2\x77\xa7\xd3\xed\xe9\x48\x22\x3b\x2f\x11\x16\x44\xd8\x7e\xa9\xa5\xa1\xc3\x05\xff\x07\x00\x00\xff\xff\xe9\xbd\x7b\x40\x65\x02\x00\x00")

func clarchTemplatesInfraMysqlTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesInfraMysqlTpl,
		"clarch/templates/infra/mysql.tpl",
	)
}

func clarchTemplatesInfraMysqlTpl() (*asset, error) {
	bytes, err := clarchTemplatesInfraMysqlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/infra/mysql.tpl", size: 613, mode: os.FileMode(420), modTime: time.Unix(1524802023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesInfraRedisTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcf\x4a\xc3\x40\x10\xc6\xcf\x3b\x4f\x31\xee\x29\xb1\x25\xb9\x17\x7a\xaa\x88\x1e\x94\x52\xf0\x01\xb6\xe9\x26\x5d\x4d\x77\xc2\x64\xe3\x1f\x4a\x0e\x36\xe0\x8b\x78\x17\xc1\xa3\x8f\xb3\x2f\x22\xbb\x01\xad\x87\x9e\x86\xf9\xf8\x7d\xc3\xf7\x4d\xa3\x8a\x07\x55\x69\x34\xb6\x64\x05\x60\x76\x0d\xb1\xc3\x04\x84\xac\xa9\x92\x00\xa2\x20\x5b\x9a\x0a\x65\x65\xdc\xb6\x5b\x67\x05\xed\xf2\xfd\x3e\x5b\x74\xcc\xda\xba\xbb\x56\x73\xdf\x1f\x09\x2b\xdd\x50\xdf\xe7\x0d\xd3\xbd\x2e\x9c\x04\x71\xec\xab\x14\xbf\xac\x3b\xde\xe4\xac\x37\xa6\xa2\x38\x5a\x09\x29\xc0\xa3\x62\x5c\x85\x0d\xcf\xa3\x98\x2d\x89\x6a\x80\x3c\xc7\xb8\xa2\x7f\xfd\xf0\x87\x6f\x3f\x0c\x7e\x78\xf3\x87\x77\x3f\x7c\xf9\xc3\x27\x94\x9d\x2d\xf0\xda\x1a\x17\xad\x49\x8a\x7b\x10\x5b\x6a\x1d\xce\xe6\x38\xc6\xce\x16\xe3\x88\x40\x76\x45\xad\x03\x11\x0b\x9e\x20\x96\xc4\x0e\xc4\x4e\x3d\x2f\xc8\x5a\x5d\x38\x43\xb6\x3d\xc5\xde\x8c\x54\xfc\x90\x0d\xd0\x98\xfc\x56\x3f\x85\xf0\x49\x08\x97\xa4\x98\x8c\x6a\x20\xa7\xa8\x99\x89\x63\xcc\x68\x8a\xc2\x9f\xf3\xc2\xa8\x3a\x91\xae\x68\xe4\x14\x43\x8d\x89\x9c\xc9\x49\x48\x9b\x82\x10\xa6\x8c\xf0\xd9\x1c\xad\xa9\xe3\x05\x51\x53\x95\x5d\x2a\xa7\xea\x44\x33\x07\xa6\x07\x21\x58\xbb\x8e\x2d\xfe\x9e\x07\xd1\x4f\xf1\x7f\xa1\x14\x40\x8c\xcf\x8e\xc5\x2c\xf4\xf0\x13\x00\x00\xff\xff\x18\xb9\x1d\xc9\x06\x02\x00\x00")

func clarchTemplatesInfraRedisTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesInfraRedisTpl,
		"clarch/templates/infra/redis.tpl",
	)
}

func clarchTemplatesInfraRedisTpl() (*asset, error) {
	bytes, err := clarchTemplatesInfraRedisTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/infra/redis.tpl", size: 518, mode: os.FileMode(420), modTime: time.Unix(1524802023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesMainTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\xca\xcc\x2d\xc8\x2f\x2a\x51\xd0\xe0\xe2\x54\x4a\xcf\x2c\xc9\x28\x4d\xd2\x4b\xce\xcf\xd5\xaf\xae\xd6\x73\x2e\x2d\x2a\x4a\xcd\x2b\x09\x2d\x4e\x2d\xaa\xad\x45\x12\x08\x4a\x2d\xc8\xaf\xad\xd5\x4f\xce\x4d\x51\xe2\xd2\xe4\xe2\x4a\x2b\xcd\x4b\x06\x1b\xa5\xa1\xa9\x50\xcd\xc5\x99\x9c\x9b\xa2\xe7\x5a\x91\x9a\x5c\x5a\x92\xaa\xa1\xc9\x55\xcb\x05\x08\x00\x00\xff\xff\x7f\xec\xa2\x08\x6d\x00\x00\x00")

func clarchTemplatesMainTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesMainTpl,
		"clarch/templates/main.tpl",
	)
}

func clarchTemplatesMainTpl() (*asset, error) {
	bytes, err := clarchTemplatesMainTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/main.tpl", size: 109, mode: os.FileMode(420), modTime: time.Unix(1524802023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesModelTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcc\x31\x8e\x83\x30\x10\x85\xe1\x9a\x39\xc5\x68\xca\x2d\x38\x00\xdd\x0a\x9a\xed\xb6\x48\x6a\x6c\xe1\x11\x72\xf0\x60\xc7\x0c\x52\x10\xe2\xee\x51\x64\xa2\x54\xa9\xff\xef\xbd\x64\x87\xc9\x8e\x8c\x12\x1d\x07\x00\x2f\x29\x66\x45\x52\x2f\x4c\x00\xba\x25\xc6\x7d\xaf\x5b\x2b\x1c\xfe\xa7\xf1\x38\x70\xd1\xbc\x0e\x8a\x3b\x54\x7f\x1d\xfa\x59\xd1\xdc\x96\x38\x37\xe4\x1d\xe1\x18\xb3\x34\x94\xb2\x17\x9b\xb7\x7e\xe2\x8d\x0c\x40\xd5\x66\xb6\xca\xee\x57\xf1\xf5\x5a\x5f\xbc\x30\xbe\x57\x43\x69\xbd\x55\x32\x50\x5d\x93\xfb\x2a\xd7\xd2\x4e\xd9\x71\xe0\x22\x7f\x3e\xf4\x94\xae\xb4\xde\x2a\xd2\x72\x0f\x0d\xf9\xd9\xf1\x83\x0c\x1c\xf0\x0c\x00\x00\xff\xff\x5b\xa4\x61\x16\xee\x00\x00\x00")

func clarchTemplatesModelTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesModelTpl,
		"clarch/templates/model.tpl",
	)
}

func clarchTemplatesModelTpl() (*asset, error) {
	bytes, err := clarchTemplatesModelTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/model.tpl", size: 238, mode: os.FileMode(420), modTime: time.Unix(1524802023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesProjectConfigTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x51\x6f\xda\x30\x10\xc7\x9f\x7d\x9f\xe2\xe6\x87\x8a\x4c\x28\xa4\x43\x6a\x59\x26\x1e\x50\xa7\x69\x3c\x54\x8a\x26\xed\x1d\x13\x4c\xf0\x08\xb6\x7b\x76\xda\xa1\x8a\xef\x3e\x9d\x43\x11\x9a\xa6\x41\xf3\xe4\x73\xfe\xbf\xfb\x5f\xee\x2e\x5e\xd5\x5b\xd5\x68\xf4\xe4\x7e\xe9\x3a\x02\x98\x9d\x77\x14\x71\x00\x42\xb6\xae\x91\x00\x42\x36\x26\x6e\xba\x65\x5e\xbb\xdd\x68\x5b\x6c\xbb\x65\x67\x47\xde\xcb\xbf\x5e\xe8\x36\xe8\xfd\xc6\x34\x9b\xe8\x5e\x34\x8d\xb4\x7d\xae\x9d\x5d\x9b\x46\x42\x06\xf0\xac\x08\x1f\x52\x88\x1f\xf9\x1a\x20\xee\xbd\xc6\x59\x35\xc7\x10\xa9\xab\x23\xbe\x82\xa8\xd8\x37\x44\x32\xb6\xc1\xc5\x4a\xaf\x55\xd7\xc6\x52\x4e\x26\x93\x89\x5c\xc0\xe1\x88\x3c\xee\xc3\x53\x7b\x06\x7d\x77\x21\x22\x3f\x6f\x20\xe9\xa7\xce\x90\x5e\x95\x32\x52\xa7\x25\x9e\x12\xdd\x7e\xba\xcf\x8b\xbc\xc8\x6f\xe5\x02\xc4\xcf\xa0\xe9\x3a\x8c\x9c\x8b\x4c\x54\x2a\x84\x17\x47\xab\xcb\x84\x3f\x2a\x99\xfa\xaa\xa2\x5a\xaa\xa0\xaf\xf0\xd1\xf5\xd6\x59\x4d\xc9\x8b\x3b\x71\x5e\xdd\x49\x35\x1e\x17\x77\x67\xdd\xf8\xa1\x57\x26\xfc\xa3\x1b\xef\x6b\xc6\x9b\xdd\x45\xea\x6e\x7c\xff\x99\x81\x47\xf5\xfb\xc1\x59\x8b\xc6\x26\xee\x3f\x36\x45\x51\x9c\x95\xcb\xa3\x3f\xab\x76\x56\xcd\x41\xa4\x81\x82\x48\x5f\xc2\xc2\x75\x67\x6b\x1c\xc4\x8d\x09\xfd\xaa\x64\x58\x91\xb1\x71\x90\x31\xe1\x7d\x9e\xa2\xd6\x26\x45\x76\x02\xe6\xd6\xc4\x7e\xc1\x7a\xa1\xf2\x06\xcb\x29\x2f\xd8\xeb\x01\x84\x59\xa3\x26\xe2\x8b\xd3\x5a\xe6\x15\xb9\x5a\x87\x30\x90\xca\x1b\x39\xc4\x1b\xe5\x4d\xf6\x25\xc9\x3e\x4c\xd1\x9a\x96\xb3\x88\xd6\x35\xf9\x37\x15\x55\x3b\xd0\x44\x19\x88\x03\x80\xd8\xa5\x0d\x2c\xa7\xfd\x2a\x5e\x4c\x9f\xe4\x6c\x90\x0e\xd7\x59\x50\x1a\x6b\x39\xed\xe7\x7b\xd1\x22\xc9\xd9\x22\x1d\xae\xb3\x38\xfe\x8d\x53\xbc\xe1\x6c\xac\x9a\x55\xf3\x12\x11\x95\x37\x43\x10\xfd\x58\x4a\x4c\x45\x73\x9c\x2a\x29\x31\x39\x0c\x39\xc5\x01\xfe\x04\x00\x00\xff\xff\xcd\x87\xf3\xbe\x3b\x04\x00\x00")

func clarchTemplatesProjectConfigTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesProjectConfigTpl,
		"clarch/templates/project/config.tpl",
	)
}

func clarchTemplatesProjectConfigTpl() (*asset, error) {
	bytes, err := clarchTemplatesProjectConfigTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/project/config.tpl", size: 1083, mode: os.FileMode(420), modTime: time.Unix(1524802023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesProjectHandlerTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd2\xcd\x8e\xd3\x30\x10\x07\xf0\x73\xe6\x29\x86\x1c\x50\xbc\xda\x75\xc5\x15\xd4\x03\x2c\x48\x80\x10\x54\xac\xe0\x8a\x8c\x33\x75\x87\xa4\x76\x34\x99\x54\x54\x91\xdf\x1d\x65\x93\xee\x17\x17\x90\x7a\x8a\x1d\xcd\xdf\xf3\x4b\x3c\x9d\xf3\x8d\x0b\x84\x9d\xa4\x5f\xe4\x15\x80\xf7\x5d\x12\xc5\x0a\x8a\xb2\x57\xf1\x29\x1e\x4a\x80\xa2\x0c\xac\xbb\xe1\xa7\xf5\x69\xbf\x1a\x47\x7b\x3d\x88\x50\xd4\x6f\x3d\x49\xce\x0f\x5e\x7c\xa5\x2e\xe5\xbc\x5a\x0e\x5b\xb5\x29\x04\x92\xf2\x71\xdc\xf5\xae\x6f\xe8\xc0\x7e\xb7\x0a\xe9\xe0\x5a\xae\x9d\xa6\xa7\x45\x81\xe3\x55\x48\x91\xfd\xb4\x2a\xc1\x00\xe8\xb1\x23\x7c\xef\x62\xdd\x92\x6c\xe6\xf3\xb1\x57\x19\xbc\x8e\x19\x60\x3b\x44\x8f\x95\xee\xb8\xc7\x8b\xc7\x45\x06\x37\x4e\x7a\xfa\xf0\xb6\xf2\x78\x11\x38\xda\xeb\x14\x95\x7e\xab\x41\x8e\x8a\x23\x14\xbc\x45\xae\x2f\x91\x44\xf0\xe5\x1a\x97\x6f\xb6\xaf\x35\x71\xe5\xed\xc6\x89\xdb\x57\x25\xd7\xa5\x31\xaf\x6e\x6b\xd6\x6b\x8c\xdc\x4e\xc1\x42\x48\x07\x89\xc8\x35\x14\x19\xe0\xb4\xbd\x7a\x01\xff\x04\x8a\xfa\x44\x74\x89\x0d\x1d\x27\x00\xc7\xf0\x3f\xba\x86\x8e\x67\xc4\x7d\x9f\x6f\x84\xde\x70\xac\x3f\xde\x7c\xf9\xfc\x17\x32\x4d\x34\x92\xad\xf3\x34\x66\x33\xb5\x4d\xb2\x48\x17\xa5\xb7\x77\xe1\xe7\x69\x91\x3d\xbb\x97\xcd\x53\x61\x3f\xcd\x8f\x77\x53\xbe\x22\x39\xad\x8c\xb9\xc7\x93\xc8\xac\xe7\x2d\xfe\xb8\xfb\x09\x0f\xa6\xc6\x9e\xb4\x37\xb7\x93\x50\x9d\xa7\xdb\xb2\x8f\xdc\x42\x86\x3f\x01\x00\x00\xff\xff\xa3\x7b\xb7\xc8\x21\x03\x00\x00")

func clarchTemplatesProjectHandlerTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesProjectHandlerTpl,
		"clarch/templates/project/handler.tpl",
	)
}

func clarchTemplatesProjectHandlerTpl() (*asset, error) {
	bytes, err := clarchTemplatesProjectHandlerTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/project/handler.tpl", size: 801, mode: os.FileMode(420), modTime: time.Unix(1524802023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesProjectLoggerLoggerTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x8b\xdb\x30\x10\x3d\x6b\x7e\x85\xaa\x43\xb1\x4b\x70\xd3\xab\x21\x87\x34\x49\xa1\x10\xda\x42\x7b\x2b\x3d\x28\xce\x58\x11\x95\x35\x62\x2c\x67\x21\x21\xff\x7d\x91\x6c\x67\x37\x2c\xac\xc1\xc6\x7a\xef\xcd\x9b\x2f\x05\xdd\xfc\xd7\x06\xa5\x23\x63\x90\x01\x6c\x17\x88\xa3\x2c\x40\x28\x47\x46\x01\x08\x65\xa8\x1a\x0e\xc8\x15\xb1\xf9\x7c\xd1\x41\xbd\x85\xd2\xdb\x10\xa3\x82\x12\xe0\xac\x59\xee\xb3\x9b\xfc\x74\xd1\xa1\xda\x4f\xce\xed\xe0\x1b\xf9\xdd\xdb\x38\x02\x45\x29\xaf\x20\x1a\xf2\xad\xac\x57\x32\x09\x37\xe4\x5b\x6b\xae\x20\xc4\x1e\xcf\xe8\x6a\x39\x3f\x89\xfc\x81\x4f\xeb\x48\x9d\x6d\x32\xb7\x8e\x45\x02\xb7\x78\x18\x4c\x06\xca\x05\x08\xb1\x4d\x7f\x14\x3a\xf4\x31\x05\xb7\xda\xf5\x98\xf0\x9d\x6f\xe8\x68\xbd\x99\x1c\x55\x43\xbe\x27\x87\xea\xce\x21\x8f\xb9\xeb\x39\xd5\x2b\xa7\x07\x41\x91\xf3\xfc\xd6\x5d\x70\xd9\xef\x63\xd2\xcf\xc7\x97\xfa\x45\x6a\xd3\xea\xb1\x85\x2f\xcb\x65\x0a\x12\x7f\x4e\xc8\xa8\xdb\x88\x5c\xcf\xd8\x2d\x7d\x7e\x0e\x31\x0c\xf1\x97\x8e\xa7\xbe\x96\x7f\xff\xf5\x91\xad\x1f\x5d\x54\x1f\x8f\x34\x44\x75\x97\xee\x98\x89\xdf\xd7\x23\xf3\x5d\x7f\x1b\xe7\x5b\x3d\xb4\x30\x9d\xf2\xd4\x64\x1e\x7c\xda\x5c\xb5\xd1\xc1\x46\xed\x36\xe4\x88\x33\x37\x05\x01\x08\xb7\x90\xc8\x9c\xb6\x94\xdd\xbe\x0e\xd6\x1d\x8b\x12\x84\x6d\x33\xfe\x61\x25\xbd\x75\x69\x99\xc2\x91\xa9\xbe\xe9\xa8\x5d\x81\xcc\x65\x2a\x00\xc4\x74\x15\x56\xd2\xc1\x0d\x9e\x03\x00\x00\xff\xff\xaa\xc8\x2d\x04\x6e\x02\x00\x00")

func clarchTemplatesProjectLoggerLoggerTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesProjectLoggerLoggerTpl,
		"clarch/templates/project/logger/logger.tpl",
	)
}

func clarchTemplatesProjectLoggerLoggerTpl() (*asset, error) {
	bytes, err := clarchTemplatesProjectLoggerLoggerTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/project/logger/logger.tpl", size: 622, mode: os.FileMode(420), modTime: time.Unix(1524802023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesProjectMiddlewareMiddlewareTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\x82\x4b\xa0\x0b\xaa\x90\xe9\xfb\x02\x39\x78\x9d\x14\x0d\x90\xb8\xd9\x7c\x60\x0f\x45\xb1\x60\xe8\x91\xc4\x8d\x44\xaa\xa3\x51\x1c\xc7\xf0\x7f\x5f\x90\x54\xfd\xd1\x38\xdd\x83\x13\x7a\xe6\xcd\x7b\x33\x8f\x1f\xee\xb4\x79\xd2\x15\xf0\xd6\x2e\x97\x0d\xac\x34\x02\x63\xb6\xed\x3c\x12\x97\x2c\x13\x65\x4b\x82\x65\x82\x6c\x0b\x82\xb1\x4c\x54\x96\xea\xe1\x51\x19\xdf\x4e\x37\x1b\x35\x1f\x10\xc1\xd1\x43\x0f\xb8\xdd\x1e\x04\x6e\xa1\xf3\xdb\xed\xb4\x43\xff\x2f\x18\x9a\x36\xbe\xaa\x00\xc5\x71\x79\x65\xdd\xc4\x78\x47\x68\x1f\xa7\xc6\x63\x7f\x22\x5d\x79\x67\x4d\x58\xc5\x9c\x57\xc3\x23\xa0\xf2\x58\x4d\x5f\x75\x77\x22\x14\x3e\xc6\x23\x08\x96\x33\x46\xeb\xee\xc7\x50\xbc\x27\x1c\x0c\xf1\x0d\xcb\xa6\x53\xae\x07\xaa\xaf\x63\x5c\x5d\xef\x66\x9e\x0d\x54\x7f\xd6\x6e\xd9\x00\xb2\xed\x58\xbc\xcf\x5e\xb6\x5d\xc3\xad\x23\xc0\x52\x1b\x08\x3c\x73\x8f\xbd\xcc\x79\x65\x9d\x1a\xcb\x3e\x0d\xce\xb0\xec\xca\x57\x95\x75\xd5\xa9\xd4\x74\xca\x83\x0a\x38\xb2\x46\x13\x9c\x80\x6c\x19\x2b\x07\x67\xf8\x02\x56\x7b\x6d\x99\xff\xdc\xc8\x86\x65\x08\x34\xa0\xe3\xbf\xa7\xf9\x36\xdb\x5d\xa9\xa4\xda\xf6\xfc\x63\x8a\xe7\xfc\x74\x9b\x81\xc1\x78\x57\xda\x8a\xff\x71\xc6\x83\xf7\xea\x1c\x4a\x3d\x34\x34\x8f\x51\x99\xff\xc8\xab\xd9\x72\x39\x6b\x1a\xbf\xba\x06\xaa\xfd\xb2\x97\xe2\xfc\xe2\xea\xe2\xfe\x42\xbc\x45\x7c\x06\xbd\x04\xec\xa5\x98\x19\x03\x7d\x3f\x99\x87\xad\xf5\xcd\x24\x26\x27\x5f\xd0\x86\x6d\x2c\xb8\x08\x1e\x78\xb4\xaf\x9a\xac\x77\x87\x3c\x01\x37\x6b\x9a\x84\xec\xf9\x19\x27\x1c\x60\x37\x6a\xec\x72\x01\x2b\x99\xe0\xf9\x7b\x13\xbf\xbb\x01\x07\xb6\x85\x3a\x69\xf8\xc7\x80\x08\x6d\xc2\x0b\xe5\x21\x9d\xf5\xa4\x91\x82\x27\xe1\xb8\xab\x85\x5f\xc9\x5c\x3d\xdc\xcf\x83\x1f\x99\x51\x0b\x78\x21\x99\x33\x96\x65\x8d\x26\x70\x66\xbd\x43\xde\x59\x67\x40\xc6\xea\x98\xef\x34\xd5\xd1\x5a\x75\x0b\xdf\x07\xe8\x49\x3d\xdc\x5e\xa9\x1b\x4d\x35\xcb\xb2\x36\x5a\x79\x9c\x4e\xf6\x06\xe6\x78\x53\xd4\x55\xfa\x77\xe9\x4a\x2f\x59\x96\x65\x65\x4b\xea\xae\x43\xeb\xa8\x94\xe2\x43\xcf\x3f\xf4\xa2\x78\x53\x5e\xf0\xa0\x9b\x17\xa1\xe0\x55\x77\xea\x8e\x30\x38\x21\x3a\x84\xd2\xbe\x44\xef\xcf\x17\x93\xd9\xcd\xa5\x38\x81\xd1\x54\x8b\xf7\x08\x6c\x17\xd5\xe6\x8d\x05\x47\x97\x37\x32\x7f\x0b\x19\x7a\xc0\x89\xae\xc0\xd1\x51\x63\xe1\x61\x98\x85\xe8\x61\xcd\xa5\x23\x29\x7a\xd2\x34\xa4\x29\xfe\x46\x4b\x80\xea\x2e\x46\x0e\x81\xf7\xb6\x05\x99\x9e\x9e\x82\x27\x77\xdf\x08\x27\x37\x45\xc1\xd3\x62\x0f\x38\x1f\x30\x1e\x31\x29\xc6\xdd\x12\x05\x1f\x57\x3b\xd0\x27\x0b\xcd\x32\x31\xf5\x7f\xae\xd3\xe2\x5a\x77\x52\xd4\xf1\x30\x1f\x8d\x92\xce\xf7\xff\x97\x7e\x1f\x00\xd7\xc7\x26\xdc\x5e\xa9\xbf\x42\x74\x9c\x2d\x67\xd9\xfe\xc2\xfe\x82\xea\x09\xd6\xe1\xe5\xb2\xae\x2a\x78\xcb\x5b\xdd\x7d\x4d\xdf\xbe\x7d\xfd\x96\x16\x39\x1f\x1f\x3c\x15\x29\x0e\x4e\x78\x30\xe0\xcb\x63\x78\x7b\x03\x4b\x31\xd2\x1c\xb0\x63\x5f\xeb\x06\x50\xb6\xf9\xfe\x26\xbd\x0f\xfa\xb5\x78\x12\xda\xc1\x4f\x5d\x36\xeb\x1c\xe0\x4f\x05\x17\xce\xf8\xe0\x28\x07\x44\x8f\xf1\xfe\x95\x1e\xf9\x53\xc1\x9f\x75\x33\x40\x1f\x6e\x08\x6a\x17\x7e\x9a\x62\x32\x03\xc4\x10\x8b\x5c\xf1\xd9\x41\xd4\x6b\xf9\x54\xec\x78\x63\xe0\xa8\x0f\x79\x42\x3d\xa2\x4e\x88\x27\xf9\x7f\x0a\xfe\xbc\x57\x1e\x3b\x49\xe9\x6c\x54\xee\x3a\x70\xe3\x7e\xc9\xe7\x3c\xa6\xb6\xf1\xef\x38\xb1\xb3\x4d\xf8\xba\xcd\x63\xce\x96\x41\x83\xff\x76\x16\xe2\x23\xd3\x08\x04\x44\x36\x16\x87\xcf\x61\x79\x38\x20\xff\x05\x00\x00\xff\xff\xf2\x91\x3d\x31\x9a\x07\x00\x00")

func clarchTemplatesProjectMiddlewareMiddlewareTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesProjectMiddlewareMiddlewareTpl,
		"clarch/templates/project/middleware/middleware.tpl",
	)
}

func clarchTemplatesProjectMiddlewareMiddlewareTpl() (*asset, error) {
	bytes, err := clarchTemplatesProjectMiddlewareMiddlewareTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/project/middleware/middleware.tpl", size: 1946, mode: os.FileMode(420), modTime: time.Unix(1524802023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesProjectRepositoryTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\x41\x4e\xc3\x30\x10\x45\xd7\x99\x53\x0c\x5d\x25\x15\x4a\xf7\xa0\x6e\x0a\xec\x51\xc5\x05\x12\xd7\x49\xa6\x8d\x3d\xd6\x64\x2c\xb9\x54\xb9\x3b\x72\x80\x82\x54\xb1\x60\x65\xf9\xfb\xfd\xf7\x1d\x1a\x73\x6a\x7a\x8b\x41\xf8\x68\x8d\x02\x90\x0b\x2c\x8a\xab\x9e\x74\x88\x6d\x6d\xd8\x6d\x8e\xe4\xdf\x87\xb8\xe9\x59\xdc\x0a\x40\xcf\xc1\xe2\xde\x06\x9e\x48\x59\xce\xaf\x9f\x45\x9c\x54\xa2\xd1\xcb\x0c\xd0\x45\x6f\xb0\xd4\x81\x26\x5c\xdf\x70\x15\xbe\x49\xe3\xa7\xc6\x28\xb1\x2f\x0f\x2d\xae\xb3\xb6\x7e\xde\xdd\x63\x87\xb9\x59\x6a\xba\x66\x15\x5a\x11\x96\xaf\x03\x2f\x50\x68\xc2\x87\x2d\x1e\xda\x7a\x67\x7b\xf2\x65\x05\x05\x75\xa8\xa9\x7e\x59\x80\xbb\x2d\x7a\x1a\x33\x57\x88\xd5\x28\xfe\xfa\x04\xc5\x0c\x0b\x6b\x45\xb2\xa1\x2b\x35\x55\x8f\xcb\xed\x57\x49\x53\xbd\xe7\x71\x6c\x1b\x73\xca\xea\xbf\xdc\xb7\xf2\x62\xfe\x99\xb4\xb2\xac\x65\xd9\x13\x3b\x47\xfa\xbf\x5f\x7e\x67\x9e\x46\x98\xe1\x23\x00\x00\xff\xff\x33\xd3\xef\x3d\x9f\x01\x00\x00")

func clarchTemplatesProjectRepositoryTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesProjectRepositoryTpl,
		"clarch/templates/project/repository.tpl",
	)
}

func clarchTemplatesProjectRepositoryTpl() (*asset, error) {
	bytes, err := clarchTemplatesProjectRepositoryTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/project/repository.tpl", size: 415, mode: os.FileMode(420), modTime: time.Unix(1524802023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesProjectValidatorValidatorTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xce\x3b\xae\xc2\x30\x10\x46\xe1\xda\xff\x2a\x46\xa9\x92\x26\x5e\xc1\xad\x6e\x45\x41\x17\xd1\x0f\xc6\x38\x56\x98\xd8\xf2\x4b\x42\x51\xf6\x4e\x03\x28\xa2\x3e\x5f\x71\x22\x9b\x85\x9d\xa5\xc6\x0f\x7f\xe3\x12\x12\xe0\x25\x86\x54\xa8\x73\xbe\xcc\xf5\x3a\x9a\x20\x9a\x33\xe7\xc5\x36\x6f\x66\xed\xc2\x97\x76\x40\xe3\x44\x3d\x94\x10\xfd\xd1\xa1\x8c\x13\xbb\x33\x47\x28\x91\x9f\xf0\x5f\x73\x09\x32\x3d\xa3\x7d\x93\x01\xb8\xd7\xd5\xd0\x69\xf5\xe5\xf2\x61\xfd\x40\x1b\x94\xd6\x87\x2d\xb5\x41\xed\xd8\xf1\x0a\x00\x00\xff\xff\x39\x61\xd9\xb4\xb1\x00\x00\x00")

func clarchTemplatesProjectValidatorValidatorTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesProjectValidatorValidatorTpl,
		"clarch/templates/project/validator/validator.tpl",
	)
}

func clarchTemplatesProjectValidatorValidatorTpl() (*asset, error) {
	bytes, err := clarchTemplatesProjectValidatorValidatorTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/project/validator/validator.tpl", size: 177, mode: os.FileMode(420), modTime: time.Unix(1524802023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesRepositoryRepositoryTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\xc1\x6e\xdb\x30\x0c\x86\xcf\xd6\x53\x68\x39\x04\x76\x10\x28\x3b\x77\xe8\xc5\xf5\x76\x1c\x8a\x76\xc5\x0e\xc3\x0e\x9a\xc3\x24\x6a\x6c\xc9\xa0\xe9\xb6\x99\xa1\x77\x1f\x68\x7b\x6e\x9a\xd6\x81\x97\x01\x41\xaf\x12\x7f\xf2\xff\x48\x4a\x85\x4e\xb7\x7a\x0d\x12\xa1\x70\xa5\x21\x87\x3b\x21\x4c\x5e\x38\x24\x19\x8a\x60\xb2\x36\xb4\xa9\x7e\xa9\xd4\xe5\x8b\xba\x56\x57\x15\x22\x58\xba\x2b\x01\xbd\xdf\x3b\xb8\x81\xc2\x79\xbf\x28\xd0\xdd\x43\x4a\x93\x7f\xd5\xe5\x6e\x09\xd9\x81\xea\xde\xd8\xdf\x9b\x6a\xb1\x76\x98\x4f\x44\x24\x04\xed\x0a\x90\xac\xd4\x39\x64\xd7\xdb\xb5\xf7\x37\xbd\x63\x69\x2c\x01\xae\x74\x0a\xb2\x16\xc1\x17\x63\x97\xf1\x2e\x9c\x35\x59\xd5\x0b\x49\x24\xc3\x1f\x3f\xdf\xba\x98\x4b\x40\x74\x18\xb1\x1a\x4b\x1a\x96\x1f\x17\xdf\x92\x43\x38\x4d\x7a\x57\x2c\x35\x9d\xa8\x4d\x20\x83\x41\x6d\x13\x24\xfc\x73\x07\x0f\x9b\x57\x12\x56\x29\x71\xe7\xba\xf9\xa9\xe7\xcb\xeb\xf6\x44\x04\x49\x2c\x67\x3c\x0b\x95\xc4\x9c\x6b\x55\xd9\x54\x7e\x85\xc7\x81\x81\x84\x7b\xe1\xd1\xe0\xd4\x6a\x11\x20\x50\x85\x56\x4e\x5f\xdb\xaa\x93\xf8\x42\x26\xb1\xef\xab\x85\xb4\x31\xa5\x9c\xbd\x8e\x8c\x64\x37\xf1\xc7\x0d\x20\xc8\x93\xe6\xce\x5e\x0c\x41\x2e\x2f\x2e\x65\xae\xb7\x30\x18\xfe\x31\x12\x81\x59\xb1\x8a\x43\xd9\x92\x4a\x62\xf5\x9d\x2b\xb7\xf5\x23\xc5\x6e\xc2\x29\x67\x8b\xd4\x67\xce\xfe\xa9\x09\xff\x70\x29\xad\xc9\xb8\xd0\x5f\x6a\x6b\xb2\xa6\xbe\x08\x7c\xdf\x09\x96\xcd\xf9\x66\x1c\x77\xbb\xab\x47\xc1\xc7\x62\x4f\xdf\x88\xab\xfd\x08\x5a\x2c\x29\x3c\x07\x6d\xfb\xb8\x1e\x74\x56\x9d\xce\xfa\x92\xe5\x1b\x6a\x5b\xea\x94\x8c\xb3\x61\x07\x37\x97\x6c\x23\xa4\xa7\xbd\xfd\x6d\xf4\xfb\x28\xf4\xa4\xae\x10\xf8\xb9\x36\x6e\x3a\x70\x11\xf8\x68\x0c\x7c\x4f\xdf\x88\x47\xe3\x77\x1f\xc4\x3b\xe1\xbf\xd5\x0f\x67\xa5\xef\xbe\xb8\x63\x9b\xde\xdb\xfc\xcf\x8d\xee\x4a\x8d\x58\xe9\x43\xa4\x96\xe5\x4f\x00\x00\x00\xff\xff\x1f\x45\x07\xd7\x52\x07\x00\x00")

func clarchTemplatesRepositoryRepositoryTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesRepositoryRepositoryTpl,
		"clarch/templates/repository/repository.tpl",
	)
}

func clarchTemplatesRepositoryRepositoryTpl() (*asset, error) {
	bytes, err := clarchTemplatesRepositoryRepositoryTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/repository/repository.tpl", size: 1874, mode: os.FileMode(420), modTime: time.Unix(1524802023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesUsecaseUsecaseTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xc1\x8a\xdb\x30\x10\x3d\x4b\x5f\x31\xf5\x61\xb1\x97\xc5\xb9\xa7\xe4\xd2\x86\xc2\x42\x09\x65\x4b\x4e\xa5\x14\xd7\x1e\x27\x62\x1d\xc9\x8c\xe4\xa6\xc1\xf8\xdf\x8b\xc6\xce\x6e\xb4\x75\x36\xd9\xa4\xcd\x4d\xca\xbc\x37\xef\xcd\x1b\xb9\xce\xf2\xc7\x6c\x85\xd0\x58\xcc\x33\x8b\x52\xaa\x4d\x6d\xc8\x41\x2c\x45\x84\x44\x86\x6c\x24\x45\xb4\x52\x6e\xdd\xfc\x4c\x73\xb3\x99\xb4\x6d\xfa\xb1\x21\x42\xed\x96\x16\xa9\xeb\x0e\x2e\x1e\xb0\x36\x5d\x37\xd9\x98\x02\xab\x48\x8a\xb6\x4d\xbf\x3c\xae\xba\xce\x5f\xc3\xdb\x28\xf6\xd0\x09\x61\x6d\xac\x72\x86\x76\x91\x4c\xa4\x74\xbb\x1a\xc1\x57\x67\x1b\xac\xb8\x62\xd9\xeb\x06\xa5\x1d\x52\x99\xe5\x08\xad\x14\x9f\x95\x75\xf1\x2d\xeb\x48\x83\xea\x04\xe2\x6f\xdf\xc7\xfe\xb8\x03\x36\x9b\x48\xf1\x75\x6d\xb6\xc7\xb0\x27\x90\xce\x10\x5e\x06\x5d\xd6\x45\xe6\x2e\xc4\xce\xb1\xc2\xa3\x58\x2e\x92\xdd\xf3\xe4\x82\xa1\x59\x47\x4d\xee\xfc\xc4\x82\xac\x0e\x0f\x21\xe1\xc3\x53\x1c\x9e\xb3\x6c\x74\x0e\x0b\xdc\x8e\x05\x12\xd3\x59\x34\xc9\x78\x9a\xad\x14\x84\xae\x21\x0d\x37\x2f\x34\xb7\x52\x04\x62\xa7\x40\x77\x52\x74\x4f\x72\x62\xb7\x56\x16\x6e\x5f\xa0\x12\xe0\x95\xd8\xae\x91\x10\x2e\x5a\x8c\x5e\x92\xe5\x23\x4c\x67\xe0\xdb\xa4\x81\xc3\x4f\x4a\x17\x1f\x76\x7d\x8f\x44\x0a\x55\x72\xe9\xbb\x19\x68\x55\x79\xf4\xde\x91\x56\x15\xb3\x78\xd5\xfb\x3b\x66\xd6\xaa\x3a\x69\x83\xb7\xf3\x55\x1b\xd7\x9a\x20\xeb\xfe\xbf\x0b\x7e\x29\xbf\xb2\xaa\xb9\xc2\x06\xb7\xfc\xdb\xc1\x01\x77\x72\x52\xc8\xf0\xee\xae\x52\xd2\xa7\x31\x9d\xc1\xcd\x48\x21\x8f\xec\x7e\x3e\x05\x6e\x91\xde\xcf\x79\x59\x61\xf8\xa9\x12\x7e\x9c\x1d\xc6\x7b\x5f\x37\x7b\x0e\x82\x8f\xbd\x0e\x9b\x2e\x70\x1b\x47\x0b\xe3\xa0\x34\x8d\x2e\xa2\x64\x3c\xa8\x53\xe9\x1f\x8e\xe3\xdc\xf0\xdf\x9e\xfe\xf0\xc1\x7a\x6d\x8b\xd9\x95\xef\x88\xbf\x95\x75\x58\xfc\x8b\x8d\x3d\x3a\x29\xef\x61\x40\x8d\x76\x18\xf4\x0e\x52\xfa\x1c\x7a\xfa\x90\x3d\x98\x46\x3f\x88\x3f\x01\x00\x00\xff\xff\x61\xb7\x68\x2e\x5e\x07\x00\x00")

func clarchTemplatesUsecaseUsecaseTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesUsecaseUsecaseTpl,
		"clarch/templates/usecase/usecase.tpl",
	)
}

func clarchTemplatesUsecaseUsecaseTpl() (*asset, error) {
	bytes, err := clarchTemplatesUsecaseUsecaseTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/usecase/usecase.tpl", size: 1886, mode: os.FileMode(420), modTime: time.Unix(1524802023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"clarch/templates/add.tpl": clarchTemplatesAddTpl,
	"clarch/templates/cmd/api.tpl": clarchTemplatesCmdApiTpl,
	"clarch/templates/cmd/root.tpl": clarchTemplatesCmdRootTpl,
	"clarch/templates/handler/http/hander_test.tpl": clarchTemplatesHandlerHttpHander_testTpl,
	"clarch/templates/handler/http/http.tpl": clarchTemplatesHandlerHttpHttpTpl,
	"clarch/templates/handler/http/params.tpl": clarchTemplatesHandlerHttpParamsTpl,
	"clarch/templates/infra/mysql.tpl": clarchTemplatesInfraMysqlTpl,
	"clarch/templates/infra/redis.tpl": clarchTemplatesInfraRedisTpl,
	"clarch/templates/main.tpl": clarchTemplatesMainTpl,
	"clarch/templates/model.tpl": clarchTemplatesModelTpl,
	"clarch/templates/project/config.tpl": clarchTemplatesProjectConfigTpl,
	"clarch/templates/project/handler.tpl": clarchTemplatesProjectHandlerTpl,
	"clarch/templates/project/logger/logger.tpl": clarchTemplatesProjectLoggerLoggerTpl,
	"clarch/templates/project/middleware/middleware.tpl": clarchTemplatesProjectMiddlewareMiddlewareTpl,
	"clarch/templates/project/repository.tpl": clarchTemplatesProjectRepositoryTpl,
	"clarch/templates/project/validator/validator.tpl": clarchTemplatesProjectValidatorValidatorTpl,
	"clarch/templates/repository/repository.tpl": clarchTemplatesRepositoryRepositoryTpl,
	"clarch/templates/usecase/usecase.tpl": clarchTemplatesUsecaseUsecaseTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"clarch": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"add.tpl": &bintree{clarchTemplatesAddTpl, map[string]*bintree{}},
			"cmd": &bintree{nil, map[string]*bintree{
				"api.tpl": &bintree{clarchTemplatesCmdApiTpl, map[string]*bintree{}},
				"root.tpl": &bintree{clarchTemplatesCmdRootTpl, map[string]*bintree{}},
			}},
			"handler": &bintree{nil, map[string]*bintree{
				"http": &bintree{nil, map[string]*bintree{
					"hander_test.tpl": &bintree{clarchTemplatesHandlerHttpHander_testTpl, map[string]*bintree{}},
					"http.tpl": &bintree{clarchTemplatesHandlerHttpHttpTpl, map[string]*bintree{}},
					"params.tpl": &bintree{clarchTemplatesHandlerHttpParamsTpl, map[string]*bintree{}},
				}},
			}},
			"infra": &bintree{nil, map[string]*bintree{
				"mysql.tpl": &bintree{clarchTemplatesInfraMysqlTpl, map[string]*bintree{}},
				"redis.tpl": &bintree{clarchTemplatesInfraRedisTpl, map[string]*bintree{}},
			}},
			"main.tpl": &bintree{clarchTemplatesMainTpl, map[string]*bintree{}},
			"model.tpl": &bintree{clarchTemplatesModelTpl, map[string]*bintree{}},
			"project": &bintree{nil, map[string]*bintree{
				"config.tpl": &bintree{clarchTemplatesProjectConfigTpl, map[string]*bintree{}},
				"handler.tpl": &bintree{clarchTemplatesProjectHandlerTpl, map[string]*bintree{}},
				"logger": &bintree{nil, map[string]*bintree{
					"logger.tpl": &bintree{clarchTemplatesProjectLoggerLoggerTpl, map[string]*bintree{}},
				}},
				"middleware": &bintree{nil, map[string]*bintree{
					"middleware.tpl": &bintree{clarchTemplatesProjectMiddlewareMiddlewareTpl, map[string]*bintree{}},
				}},
				"repository.tpl": &bintree{clarchTemplatesProjectRepositoryTpl, map[string]*bintree{}},
				"validator": &bintree{nil, map[string]*bintree{
					"validator.tpl": &bintree{clarchTemplatesProjectValidatorValidatorTpl, map[string]*bintree{}},
				}},
			}},
			"repository": &bintree{nil, map[string]*bintree{
				"repository.tpl": &bintree{clarchTemplatesRepositoryRepositoryTpl, map[string]*bintree{}},
			}},
			"usecase": &bintree{nil, map[string]*bintree{
				"usecase.tpl": &bintree{clarchTemplatesUsecaseUsecaseTpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

