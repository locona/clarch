// Code generated by go-bindata.
// sources:
// clarch/templates/entity.tpl
// clarch/templates/handler/http/hander_test.tpl
// clarch/templates/handler/http/http.tpl
// clarch/templates/project/handler.tpl
// clarch/templates/repository/gorm_repository.tpl
// clarch/templates/repository/repository.tpl
// clarch/templates/usecase/usecase.tpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clarchTemplatesEntityTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xa8\xae\xd6\x0b\xc8\x4e\xaf\xad\xe5\xe2\x2a\xa9\x2c\x00\x73\x9d\x13\x73\x53\x73\xc0\x62\x0a\xc5\x25\x45\xa5\xc9\x25\x0a\xd5\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\x33\x30\xd3\xc9\x30\x00\x00\x00")

func clarchTemplatesEntityTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesEntityTpl,
		"clarch/templates/entity.tpl",
	)
}

func clarchTemplatesEntityTpl() (*asset, error) {
	bytes, err := clarchTemplatesEntityTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/entity.tpl", size: 48, mode: os.FileMode(420), modTime: time.Unix(1523351651, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesHandlerHttpHander_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\x4f\x6f\x9c\x3e\x10\x3d\xe3\x4f\x61\x71\xf8\x09\x22\x7e\x26\xe7\x48\x39\xa4\x64\xa3\x74\x5b\x25\xd1\x26\x7b\xaa\xaa\xca\x98\x59\x96\x05\x6c\x77\x3c\x34\x1b\x21\xbe\x7b\x65\xf6\x8f\x36\x74\x5b\xa9\xbd\x80\x99\x99\xe7\x79\xef\xf1\xac\x54\xb5\x2c\x81\xaf\x89\x2c\x63\x55\x6b\x0d\x12\x8f\x58\x10\x6a\xa0\xd4\x17\xc3\x93\xf3\xf8\x20\x70\xe4\x8b\xfe\x5d\xe9\x32\x64\x2c\x08\xcb\x8a\xd6\x5d\x2e\x94\x69\xd3\xbe\x17\x59\x87\x08\x9a\x96\x0e\x70\x18\x4e\x0a\x0b\xb0\x66\x18\xd2\x8d\xc9\xc3\x7f\xc0\xa4\x9d\x03\x25\x1d\xa4\xad\x51\xb5\x9b\xdc\x90\x6f\x95\x29\x40\xa5\x2b\x59\x03\x4e\x7a\x65\xa5\xff\x2f\x8d\xae\x94\x3f\x4d\x7a\xf5\x65\xdd\xe5\x9d\x4e\xad\x9d\x34\x1c\x21\x90\x5a\x63\x3a\xca\x5c\xbd\xa5\xd2\x39\x40\x0a\x59\xcc\xd8\xaa\xd3\x8a\xbf\x80\xa3\xbb\x4a\x17\x37\x4d\x13\x11\xbf\xd8\xbb\x21\x5e\x62\xde\xb3\xe0\x87\x44\xde\xf2\xbe\x17\x4f\x75\x39\x0c\xc2\xcb\x91\x2d\x34\xe3\x17\x0b\x00\x91\x5f\x5d\xf3\x91\xab\xb8\x93\x35\xdc\x4a\x92\xd1\x7f\x6d\xcc\x82\xdd\x16\xf1\x60\x66\x88\x06\x23\x4a\x38\x20\xc6\x8c\x05\x5e\xf4\x32\x93\x0e\x3c\x52\xc3\x6b\x34\xba\x20\xe6\x26\x5f\xee\x6c\x89\x77\x33\x73\x93\x7f\xae\x1c\xf9\xa9\x56\xd6\x10\x7d\xf9\x7a\x71\x9e\x46\xc2\x2f\x27\x90\x6b\x2e\xad\x05\x5d\x44\x27\xc5\x84\x8f\xb4\x8e\xdb\xc5\xa3\x8e\xc2\xbd\xec\x30\x16\x0b\xa0\x0e\xf5\x7b\x80\xae\x1a\x4f\x18\xc1\x79\x12\x87\xc4\x88\x07\x78\x5d\x80\x32\x58\x00\x46\x31\x0b\x54\xc2\xbf\xf9\x7e\x59\x69\x91\x21\x48\x02\x6f\x68\x66\x34\xc1\x96\x22\x04\x17\xb3\x60\x2d\x75\xd1\xc0\xe8\xd5\x3d\x91\x9d\x9b\xfc\x7e\x57\xe9\x59\x10\x1c\x54\x2d\xb3\x2b\x7e\xa4\x97\xb0\x60\x38\xe2\xc4\xe1\xf7\x28\xcf\xc7\x5a\xf1\x84\x95\xa6\x46\xef\x6f\xdf\x5b\x3d\xfb\xde\xc9\xc6\x1b\xed\x99\x8a\x67\x92\xd4\xb9\xc7\x4f\x09\x47\x70\x22\x33\x05\xbc\x53\x7f\x33\x62\x66\x5b\x0b\x8a\x24\x55\x46\xbb\x88\x62\x36\x4c\x22\xf1\xe1\xed\x63\x71\x3e\x13\x9b\xbf\xcd\xc4\xe6\xf7\x99\x38\xdd\xfa\x4c\x06\xe1\x97\x95\xa7\x13\x4b\x5b\x48\xfa\xf3\xc8\x2d\x34\x70\x76\xe4\x67\x00\x00\x00\xff\xff\x45\x1d\x9a\xe0\x24\x04\x00\x00")

func clarchTemplatesHandlerHttpHander_testTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesHandlerHttpHander_testTpl,
		"clarch/templates/handler/http/hander_test.tpl",
	)
}

func clarchTemplatesHandlerHttpHander_testTpl() (*asset, error) {
	bytes, err := clarchTemplatesHandlerHttpHander_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/handler/http/hander_test.tpl", size: 1060, mode: os.FileMode(420), modTime: time.Unix(1523351651, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesHandlerHttpHttpTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x95\x4f\x73\xda\x3c\x10\xc6\xcf\xd6\xa7\xd0\xeb\x43\xc6\xce\xf8\x95\x27\x57\x3a\x39\x94\x3f\x05\xda\x4e\x60\x42\x68\xcf\xaa\xb4\x31\x6a\x8c\xec\xca\x6b\xda\x0c\xe3\xef\xde\x91\x65\x43\x48\x4d\xa6\x94\x76\x26\x5c\x00\x69\xf7\xd1\xfe\x9e\x5d\x5b\x39\x17\x0f\x3c\x01\xba\x42\xcc\x09\x51\xeb\x3c\x33\x48\x03\xe2\xf9\x1a\x30\xb6\x8b\x3e\x21\x9e\x9f\x28\x5c\x95\x5f\x98\xc8\xd6\xf1\x76\xcb\x06\xa5\x31\xa0\x71\x59\x80\xa9\xaa\x27\x0b\xb7\x90\x67\x6e\x61\xfe\x90\x54\x95\xff\xa7\x89\x71\x59\x80\xe0\x05\x9c\x2c\x90\x9b\xec\x2b\x08\x7c\x96\x97\x28\xfd\x7f\x92\x69\x25\xec\x2f\x9f\x84\x84\x10\x7c\xcc\x81\x4e\x10\x73\x2b\xc1\xd7\x90\xd6\xe7\x4e\xb8\x96\x29\x18\x5a\xa0\x29\x05\xd2\x2d\xf1\x1a\x41\xd6\xec\xcc\xdd\x5f\xe2\xb5\x95\x2e\x07\xb4\xa9\x95\x1d\x28\x2d\xdd\x22\xa9\x08\xb9\x2f\xb5\xa0\x01\xae\x54\x41\x2f\x8f\x9d\x18\xd2\x77\x4a\xcb\xb7\x69\x1a\x08\x7a\x99\x28\xcd\x06\x99\x46\xf8\x81\xa1\xad\x21\x55\x05\x46\x14\x8c\xa1\xbd\x6b\x6a\x75\xd8\xfe\x74\xd6\xe6\x85\xc4\x53\xf7\x75\xd0\x7f\xd7\x54\xab\xd4\x26\x7a\x82\xbd\x5f\xcc\x6e\x02\xdb\x45\xb6\x40\x8e\x65\xd1\xe7\xf2\x16\xbe\x95\xd0\x28\x86\xc4\xf3\x0c\x60\x69\x34\xf1\x2a\x42\x3a\x12\x66\x1f\x22\x6a\x0b\x08\x4f\x43\xe9\x3f\x4e\x65\x17\x8b\x92\x16\x42\xb0\x31\xe0\x54\x63\xe0\x2b\xe9\xdb\xca\x11\xd6\x2f\x12\xd6\x72\x4a\xfe\x0d\xc8\x23\x8c\xb6\x84\x13\x18\x17\x98\x19\xe8\x02\xdc\x70\x53\x6b\xd1\x96\xe0\x70\x2e\x76\x00\x2d\xe8\x27\x9e\x2a\xc9\x11\xfa\x4a\xcb\xba\x2e\x11\xd1\x8b\xba\x98\x37\x67\x77\xd3\x40\x71\xd4\x55\x07\xe0\x4e\xfa\x77\xae\x1a\x28\x4e\x30\x75\x99\x5b\x27\x3a\x5c\xa5\xcd\xc7\x4d\x4f\x8d\x32\xe7\xa6\x80\xe9\x30\x10\xe1\x7e\xf7\xb7\xa7\x68\x97\x71\x16\x76\xab\x62\xad\x7e\x25\x5d\x6d\x1c\x54\xb2\x1d\xe8\x57\xd2\xd9\x21\xa4\xd0\xd9\x59\xaf\xbb\xa5\xcf\xfd\x7c\x82\xd8\x48\x29\x79\xb6\x95\x9e\x60\x9f\x8d\x42\x30\xee\x6b\x02\x5c\x82\x39\xe4\xdc\x23\xde\xc0\xf7\x43\x34\xc4\xbc\xc1\x0b\x12\x87\x35\xd2\x89\xd2\x10\xd1\x52\xbc\x78\x27\xd4\xd8\x2b\x8b\x76\x71\xcc\x30\x0b\xb3\x47\xee\xd1\x52\x44\x75\xc1\x9b\x2b\x9b\x96\xb0\xb1\xc9\xca\x3c\xf0\x63\x9e\xab\x78\x73\x65\xdf\xa0\x9b\x2b\x36\x1e\xdd\x05\xfe\xee\x0a\x2d\xfc\x88\xae\xda\xdb\xa1\x33\x20\xee\x29\xb9\x0b\xb2\x8f\x86\x8b\x9a\xcf\x16\xbf\xea\xd4\x6f\x8b\x66\x7f\xd9\xad\xe2\x46\xcf\xc5\x0c\x47\x1f\x47\x77\xa3\xce\x30\xd7\x3e\xeb\xeb\xcf\x00\x00\x00\xff\xff\x65\xbb\x63\xa5\x79\x08\x00\x00")

func clarchTemplatesHandlerHttpHttpTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesHandlerHttpHttpTpl,
		"clarch/templates/handler/http/http.tpl",
	)
}

func clarchTemplatesHandlerHttpHttpTpl() (*asset, error) {
	bytes, err := clarchTemplatesHandlerHttpHttpTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/handler/http/http.tpl", size: 2169, mode: os.FileMode(420), modTime: time.Unix(1523351651, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesProjectHandlerTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x41\x4f\x83\x40\x10\x85\xcf\xcc\xaf\x18\x39\x18\x68\x2a\xbd\x6b\x7a\xd1\x8b\xf1\xa0\x26\x4d\xbc\x9a\x75\x19\x96\xb1\x74\x96\x0c\x43\xa3\x21\xfc\x77\x03\xb5\x46\x6e\xbd\xbd\x7d\x79\xdf\xbe\x37\xad\xf3\x7b\x17\x08\x5b\x8d\x9f\xe4\x0d\x80\x0f\x6d\x54\xc3\x0c\x92\x34\xb0\xd5\xfd\x47\xe1\xe3\x61\xe3\x3a\xd7\xed\xe9\xc8\xbe\xde\x84\x78\x74\x0d\x97\xce\xa2\xa6\xcb\x50\x60\xb9\x09\x51\xd8\x4f\x2a\x85\x1c\xc0\xbe\x5b\xc2\x47\x27\x65\x43\xfa\x7a\x6a\xc0\xce\xb4\xf7\x36\x8c\x00\x55\x2f\x1e\x33\xab\xb9\xc3\xd5\x32\x94\xe3\xdb\xa9\x83\xee\x59\xca\xa7\xdd\xcb\x73\xe6\x71\x15\x58\x8a\x87\x28\x46\x5f\xb6\xc6\x88\x2c\x46\x5a\x39\x4f\xc3\x98\x23\xa9\x46\xc5\x01\x12\xae\x26\x8d\xb7\x5b\xf4\xc5\x1f\x7c\x1d\xf3\xbb\xd9\xbe\xda\xa2\x70\x33\xe5\x12\x25\xeb\x55\x26\x17\x92\x11\x66\xf0\x7d\x7d\x66\xff\x1d\x59\x9c\xa7\xec\xe6\xe1\xd9\x05\x5f\xfd\xbe\x85\x1b\x18\xe1\x27\x00\x00\xff\xff\xa3\x28\x87\x2a\x62\x01\x00\x00")

func clarchTemplatesProjectHandlerTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesProjectHandlerTpl,
		"clarch/templates/project/handler.tpl",
	)
}

func clarchTemplatesProjectHandlerTpl() (*asset, error) {
	bytes, err := clarchTemplatesProjectHandlerTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/project/handler.tpl", size: 354, mode: os.FileMode(420), modTime: time.Unix(1523351651, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesRepositoryGorm_repositoryTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\xcf\x6b\xdb\x30\x14\xc7\xcf\x7e\x7f\xc5\x5b\x0e\x41\x2a\x41\xdd\x79\x23\x87\x35\xdd\x46\x2f\x63\x74\xf4\x34\x76\xd0\xe2\x97\x54\xc4\x96\xcc\xb3\xdc\x11\x8c\xfe\xf7\xf1\x6c\xd7\x64\x10\x97\xd4\x83\xfa\x28\x7f\x7f\x7d\x6c\x55\x76\x7b\xb0\x7b\x42\xa6\x2a\xd4\x2e\x06\x3e\x02\xb8\xb2\x0a\x1c\x51\x41\xb6\xd8\xbb\xf8\xd8\xfc\x36\xdb\x50\x5e\xb7\xad\xd9\x34\xcc\xe4\xe3\x43\x4d\x9c\xd2\xc9\xc1\x3d\x55\xa1\x3f\xf8\x7e\xd8\xa7\xb4\x98\x6b\xbc\x76\x7e\xc7\x76\x01\x1a\x20\x1e\x2b\xc2\x7d\xe0\x52\xc4\xb6\xa4\xa2\x13\xdc\x8f\x2b\xb1\x8e\xdc\x6c\x23\xb6\x90\x6d\x82\xf7\x78\x25\x5a\x73\x7b\x03\x09\x60\xd7\xf8\x2d\x7e\xa3\x3f\x5f\xa7\xed\xea\xc4\x24\x32\x8d\x53\x3d\x2d\x64\x4c\xb1\x61\x8f\xcb\x17\xe6\xb4\x92\x97\xc6\x72\x15\x1f\x5d\xdd\xc7\x4f\x18\x34\x7e\x71\x3e\xff\x54\x14\x4a\xa3\xfa\xf9\xeb\xea\xf9\x13\x98\x7f\xf4\x2b\x24\xe6\xc0\x5a\x56\xb8\x48\x25\x7e\x58\x63\x69\x0f\xf4\x92\xe3\xbd\x86\xcc\xed\xc4\x28\x6a\x19\x62\x64\x9c\x91\x3e\xb5\x94\x14\x6d\x3e\x4b\xea\xc7\x4e\xf3\x6e\x8d\xde\x15\x52\xf0\xcc\xe9\x5d\xd1\xf5\x42\x96\x46\x76\xb1\xad\xe4\xcd\xab\x11\x6f\x8e\x77\xb9\x72\x39\x3a\x1f\x35\xaa\x0b\x38\x9f\x2c\x77\x75\x78\x5e\x3a\x05\xc7\x75\xec\xe9\x56\xe8\xf2\x19\x84\xcb\x79\x88\x3f\x62\x60\x52\x4f\xb6\x68\x08\x27\xe0\x2e\xc3\x3e\x47\xb5\x61\xb2\x91\xd4\xb2\x8b\x9f\xc1\xd4\xf9\x5e\xcf\xf4\x50\xe5\x52\xdb\xff\xb4\x15\xfe\x3f\x1c\x0e\x4f\x97\x64\xee\x72\x5c\xa3\xcb\xcf\x23\x0f\xdd\x6f\x8d\x7c\x4b\x05\x8d\xc8\xba\x5f\x3e\xfb\x32\x0e\x61\x97\xde\xc6\x81\x00\x4e\xb0\x20\xc1\xdf\x00\x00\x00\xff\xff\x0f\xa6\x90\xc3\x99\x05\x00\x00")

func clarchTemplatesRepositoryGorm_repositoryTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesRepositoryGorm_repositoryTpl,
		"clarch/templates/repository/gorm_repository.tpl",
	)
}

func clarchTemplatesRepositoryGorm_repositoryTpl() (*asset, error) {
	bytes, err := clarchTemplatesRepositoryGorm_repositoryTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/repository/gorm_repository.tpl", size: 1433, mode: os.FileMode(420), modTime: time.Unix(1523351667, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesRepositoryRepositoryTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xce\xcf\x8a\xc2\x30\x10\xc7\xf1\xf3\xe6\x29\x86\x9e\xd2\xa5\x74\x9f\x61\xff\xb0\xe0\x4d\x2a\x3d\x89\x87\xd8\x8c\x35\x34\x4d\xc2\x74\x7a\x28\x25\xef\x2e\x6d\x55\xf4\x20\x0a\x5e\xbf\xfc\xe6\xc3\x04\x55\x35\xaa\x46\x20\x0c\xbe\x33\xec\x69\x10\xc2\xb4\xc1\x13\x43\x52\x1b\x3e\xf6\xfb\xbc\xf2\xed\xd7\x38\xe6\xbf\x3d\x11\x3a\x2e\x3b\xa4\x18\x6f\x42\x81\xc1\x2f\x61\xdd\xd4\x31\x26\x42\xf0\x10\x10\xa6\x81\x6a\xd1\xce\xb1\xb8\xea\x60\x1c\x23\x1d\x54\x85\x30\x8a\x8f\x7f\xe3\xf4\xb7\xb5\x32\x05\xb9\xdd\x7d\x5e\x88\xfc\xee\x36\x03\x24\xf2\x94\x2e\xeb\x9f\x61\xa5\xa5\xd1\x13\x93\x82\x7c\x7a\xb2\x61\x4f\xf8\x68\xf6\x0a\x50\x06\xad\x18\xa5\x71\x9c\xc1\x1b\xcc\x1f\x5a\x9c\x98\xf3\xe3\x73\x16\x51\x9c\x02\x00\x00\xff\xff\x13\x47\x6a\x6a\x7e\x01\x00\x00")

func clarchTemplatesRepositoryRepositoryTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesRepositoryRepositoryTpl,
		"clarch/templates/repository/repository.tpl",
	)
}

func clarchTemplatesRepositoryRepositoryTpl() (*asset, error) {
	bytes, err := clarchTemplatesRepositoryRepositoryTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/repository/repository.tpl", size: 382, mode: os.FileMode(420), modTime: time.Unix(1523351651, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesUsecaseUsecaseTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x4d\x6f\x1a\x31\x10\x86\xcf\xf6\xaf\x98\xee\xa1\xb2\x2b\xb4\xb9\x47\xe2\xd0\x0f\x55\xea\x05\x55\xa9\x38\x55\x55\xb5\xdd\x1d\x88\x15\x63\xaf\xc6\x76\x53\xb4\xda\xff\x5e\xd9\xfb\x01\x24\x10\xd8\xa0\x70\x63\x98\x79\xe7\x9d\x67\xc6\xd4\x45\xf9\x50\xac\x11\x82\xc3\xb2\x70\xc8\xb9\xda\xd4\x96\x3c\x08\xce\x32\x24\xb2\xe4\x32\xce\xb2\xb5\xf2\xf7\xe1\x4f\x5e\xda\xcd\x4d\xd3\xe4\x9f\x03\x11\x1a\xbf\x74\x48\x6d\xbb\x17\xb8\xc3\xda\x76\x81\xef\x0f\xeb\xb6\x7d\x75\xe1\x0d\x61\x6d\x9d\xf2\x96\xb6\x19\x97\x9c\xfb\x6d\x8d\x10\xb3\x8b\x0d\xea\x94\xb1\xec\xdc\x82\x32\x1e\x69\x55\x94\x08\x0d\x67\x5f\x95\xa9\x3e\x6a\x2d\x24\x88\x9f\xbf\x3e\x0c\x62\xf9\x41\xe1\x0c\xd2\x50\xb2\xcb\xfe\xb4\xfd\x56\x09\x55\x45\x19\x09\xe2\x6c\xc9\x0f\x6f\x09\x4f\xa5\x5d\x22\xb0\xac\xab\xc2\xa3\x50\xc6\xcf\xe0\x0a\x99\x2f\xa8\x31\xca\xf4\xc6\x53\x98\xb7\x3b\x4e\x07\x88\x9c\xa7\x50\xfa\xc8\x67\xf8\x25\xd2\x86\x1d\xe2\xc3\x2e\x77\x63\x3c\x2a\xae\x82\x29\x61\x81\x8f\xc7\xe0\x0b\xba\x40\x44\x1e\xdf\x5b\xc3\x19\xa1\x0f\x64\xe0\xfd\x13\xbf\x0d\x67\x07\x46\x6f\x81\x66\x9c\xb5\xa3\x19\xe1\xef\x95\xdb\xc1\xeb\xab\x24\x4c\x59\x7e\xd7\xde\xa5\xaf\x70\x3b\x87\x28\x99\xef\x37\xcd\x47\x35\xce\xd4\x2a\xa5\xbd\x9b\x83\x51\x3a\x56\x0e\xce\x8d\xd2\x49\x21\xba\x1b\x62\x49\xd5\x28\x7d\x91\xdd\x49\xd7\x77\x99\xe7\x5e\xf2\xcd\x6c\x77\x2f\xe0\x6f\xa1\x03\xbe\xfe\x80\xf7\xb6\xff\x7c\x8a\xbd\x0e\xf2\xac\x9d\xe1\x3d\x25\x86\x33\xb8\xde\x17\xf4\x1f\xfc\xa7\x9c\xc7\x6a\x12\xed\xae\x04\xe6\x27\x89\x5b\x72\xf9\x02\x1f\x45\xb6\xb0\x1e\x56\x36\x98\x2a\x93\x69\x0b\x93\x76\xf5\xdc\xca\x48\xa1\x27\x70\x9e\xdb\xb1\x3f\x90\xd8\x77\x1c\xfb\xf7\xd5\x43\xbf\x30\x2f\x67\x27\xa9\x8e\xc6\x5e\xba\xe0\x27\x40\xba\xbb\xfd\x1f\x00\x00\xff\xff\xc7\x80\x1e\x9b\xc8\x06\x00\x00")

func clarchTemplatesUsecaseUsecaseTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesUsecaseUsecaseTpl,
		"clarch/templates/usecase/usecase.tpl",
	)
}

func clarchTemplatesUsecaseUsecaseTpl() (*asset, error) {
	bytes, err := clarchTemplatesUsecaseUsecaseTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/usecase/usecase.tpl", size: 1736, mode: os.FileMode(420), modTime: time.Unix(1523351651, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"clarch/templates/entity.tpl": clarchTemplatesEntityTpl,
	"clarch/templates/handler/http/hander_test.tpl": clarchTemplatesHandlerHttpHander_testTpl,
	"clarch/templates/handler/http/http.tpl": clarchTemplatesHandlerHttpHttpTpl,
	"clarch/templates/project/handler.tpl": clarchTemplatesProjectHandlerTpl,
	"clarch/templates/repository/gorm_repository.tpl": clarchTemplatesRepositoryGorm_repositoryTpl,
	"clarch/templates/repository/repository.tpl": clarchTemplatesRepositoryRepositoryTpl,
	"clarch/templates/usecase/usecase.tpl": clarchTemplatesUsecaseUsecaseTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"clarch": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"entity.tpl": &bintree{clarchTemplatesEntityTpl, map[string]*bintree{}},
			"handler": &bintree{nil, map[string]*bintree{
				"http": &bintree{nil, map[string]*bintree{
					"hander_test.tpl": &bintree{clarchTemplatesHandlerHttpHander_testTpl, map[string]*bintree{}},
					"http.tpl": &bintree{clarchTemplatesHandlerHttpHttpTpl, map[string]*bintree{}},
				}},
			}},
			"project": &bintree{nil, map[string]*bintree{
				"handler.tpl": &bintree{clarchTemplatesProjectHandlerTpl, map[string]*bintree{}},
			}},
			"repository": &bintree{nil, map[string]*bintree{
				"gorm_repository.tpl": &bintree{clarchTemplatesRepositoryGorm_repositoryTpl, map[string]*bintree{}},
				"repository.tpl": &bintree{clarchTemplatesRepositoryRepositoryTpl, map[string]*bintree{}},
			}},
			"usecase": &bintree{nil, map[string]*bintree{
				"usecase.tpl": &bintree{clarchTemplatesUsecaseUsecaseTpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

