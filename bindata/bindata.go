// Code generated by go-bindata.
// sources:
// clarch/templates/entity.tpl
// clarch/templates/handler/http/hander_test.tpl
// clarch/templates/handler/http/http.tpl
// clarch/templates/project/handler.tpl
// clarch/templates/repository/gorm_repository.tpl
// clarch/templates/repository/repository.tpl
// clarch/templates/usecase/usecase.tpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clarchTemplatesEntityTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xa8\xae\xd6\x0b\xc8\x4e\xaf\xad\xe5\xe2\x2a\xa9\x2c\x00\x73\x9d\x13\x73\x53\x73\xc0\x62\x0a\xc5\x25\x45\xa5\xc9\x25\x0a\xd5\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\x33\x30\xd3\xc9\x30\x00\x00\x00")

func clarchTemplatesEntityTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesEntityTpl,
		"clarch/templates/entity.tpl",
	)
}

func clarchTemplatesEntityTpl() (*asset, error) {
	bytes, err := clarchTemplatesEntityTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/entity.tpl", size: 48, mode: os.FileMode(420), modTime: time.Unix(1522148439, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesHandlerHttpHander_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\x4f\x4f\xdc\x3e\x10\x3d\xc7\x9f\xc2\xca\xe1\xa7\x04\xe5\xe7\x70\x46\xe2\x40\x03\x94\xd2\x0a\x10\xb0\xa7\xaa\xaa\x1c\x67\xc8\x9a\x24\xb6\x3b\x9e\x14\x56\x51\xbe\x7b\xe5\xec\x9f\x2e\xe9\xb6\x52\x7b\x49\x3c\x7f\x9e\xe7\xcd\xf3\x73\x52\x35\xb2\x06\xbe\x24\x72\x8c\xe9\xce\x59\x24\x9e\xb0\x28\x36\x40\x79\x48\xc6\x7b\xe7\xe9\x43\xe0\x29\x24\xc3\x5f\x9b\x3a\x66\x2c\x8a\x6b\x4d\xcb\xbe\x14\xca\x76\xf9\x30\x88\xf7\x53\xb4\xf0\x80\xe3\xf8\x33\xbe\x07\x67\xbd\x26\x8b\xab\x71\xcc\x9f\x6d\x19\xff\x23\x2e\xef\x3d\x28\xe9\x21\xef\xac\x6a\xfc\xec\x96\xf2\x55\xd9\x0a\x54\xfe\x24\x1b\xc0\x59\xad\xd6\xe6\xff\xda\x1a\xad\xc2\x69\x56\x6b\x8e\x9b\xbe\xec\x4d\xee\xdc\xac\xe0\x09\x81\xd4\x12\xf3\x69\xdd\xa7\x55\x2e\xbd\x07\xa4\x98\xa5\x8c\x3d\xf5\x46\xf1\x47\xf0\x74\xa9\x4d\x75\xd6\xb6\x09\xf1\xa3\x8d\x2a\xe2\x31\xe5\x03\x8b\xbe\x4b\xe4\x1d\x1f\x06\x71\xd7\xd4\xe3\x28\x86\x41\x14\xb2\x83\x76\x8a\x58\x04\x88\xfc\xe4\x94\x4f\x5c\xc5\xa5\x6c\xe0\x5c\x92\x4c\xfe\xeb\x52\x16\xad\xa7\x88\x1b\x7b\x81\x68\x31\xa1\x8c\x03\x62\xca\x58\x14\x96\x5e\x14\xd2\x43\x40\x1a\x78\x49\x26\x15\xc4\xb5\x0d\xba\x05\x59\xd2\x75\xcf\xb5\x2d\x3f\x69\x4f\xa1\xab\x93\x0d\x24\x9f\xbf\x1c\x1d\xa6\x91\xf1\xe3\x19\xe4\x94\x4b\xe7\xc0\x54\xc9\x5e\x32\xe3\x13\xad\xdd\x74\x71\x6b\x92\x78\xb3\x76\x9c\x8a\x7b\xa0\x1e\xcd\x5b\x80\xd1\x6d\x20\x8c\xe0\x03\x89\xad\x73\xc4\x0d\xbc\xdc\x83\xb2\x58\x01\x26\x29\x8b\x54\xc6\xbf\x86\x7a\xad\x8d\x28\x10\x24\x41\x10\xb4\xb0\x86\xe0\x95\x12\x04\x9f\xb2\x68\x29\x4d\xd5\xc2\xa4\xd5\x15\x91\xbb\xb6\xe5\xd5\x3a\x33\xb0\x28\xda\x6e\xb5\x28\x4e\xf8\x8e\x5e\xc6\xa2\x71\x87\x13\xdb\xe7\x51\x81\x8f\x73\xe2\x0e\xb5\xa1\xd6\x6c\x6e\xdf\x48\x7d\xf1\xad\x97\x6d\x10\x3a\x30\x15\x0f\x24\xa9\xf7\xb7\x1f\x33\x8e\xe0\x45\x61\x2b\x78\xb3\xfd\xd9\x84\xb9\x78\x75\xa0\x48\x92\xb6\xc6\x27\x94\xb2\x71\x66\x89\x77\xab\x0f\xd5\x61\x4f\x3c\xff\xad\x27\x9e\x7f\xef\x89\xfd\xa9\x0f\x64\x11\x7e\x19\xb9\xdf\xb1\x70\x95\xa4\x3f\xb7\x9c\x43\x0b\x07\x5b\x7e\x04\x00\x00\xff\xff\x10\x87\xfd\x44\x2c\x04\x00\x00")

func clarchTemplatesHandlerHttpHander_testTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesHandlerHttpHander_testTpl,
		"clarch/templates/handler/http/hander_test.tpl",
	)
}

func clarchTemplatesHandlerHttpHander_testTpl() (*asset, error) {
	bytes, err := clarchTemplatesHandlerHttpHander_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/handler/http/hander_test.tpl", size: 1068, mode: os.FileMode(420), modTime: time.Unix(1522223455, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesHandlerHttpHttpTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x95\x51\x6f\xd3\x30\x10\xc7\x9f\xe3\x4f\x61\xf2\x30\x25\x53\x70\xb4\xd7\xa1\x3d\xb0\xad\x74\x05\xb4\x56\xeb\x0a\xcf\xc6\xbe\xa5\x66\xa9\x13\xec\x4b\xa1\xaa\xf2\xdd\x91\xe3\xa4\xa5\x23\x9d\x28\x05\x69\x7d\x69\x63\xdf\xfd\x7d\xbf\xff\x5d\xe3\x92\x8b\x47\x9e\x01\x9d\x23\x96\x84\xa8\x45\x59\x18\xa4\x11\x09\x42\x0d\x98\xba\xc5\x90\x90\x20\xcc\x14\xce\xab\x2f\x4c\x14\x8b\x74\xbd\x66\xc3\xe6\x69\x66\xc1\xd4\xf5\xf6\xf9\x0e\xca\xc2\x2a\x2c\xcc\xca\xaf\x4e\x1e\xb3\xba\x0e\x8f\x49\x4e\x2b\x0b\x82\x5b\xf8\x2b\x91\xd2\x14\x5f\x41\xe0\x93\xdc\x4c\xe9\xd7\x59\xa1\x95\x70\xbf\x42\x12\x13\x42\x70\x55\x02\xbd\x41\x2c\xd7\x6b\x76\xc5\x17\x90\x37\x67\xdf\x70\x2d\x73\x30\xd4\xa2\xa9\x04\xd2\x35\x09\x5a\x41\xd6\xee\x4c\xfc\x23\x09\xba\x6a\x67\x57\xb4\xad\x97\xed\x28\xcd\xfc\x22\xa9\x09\x79\xa8\xb4\xa0\x11\xce\x95\xa5\xa7\xfb\x4e\x8c\xe9\x3b\xa5\xe5\xdb\x3c\x8f\x04\x3d\xcd\x94\x66\x57\x85\x46\xf8\x81\xb1\xab\x21\x57\x16\x13\x0a\xc6\xd0\xf3\x0b\xea\x74\xd8\xf6\x74\xd6\xe5\xc5\x24\x50\x0f\x4d\xd0\xab\x0b\xaa\x55\xee\x12\x03\xc1\xde\x4f\xc7\xb7\x91\xeb\x28\x9b\x22\xc7\xca\x5e\x72\x79\x07\xdf\x2a\x68\x15\x63\x12\x04\x06\xb0\x32\x9a\x04\x35\x21\x3d\x09\xe3\x0f\x09\x75\x05\xc4\x87\xa1\x5c\xae\x46\xb2\x8f\x45\x49\x07\x21\xd8\x10\x70\xa4\x31\x0a\x95\x0c\x5d\xe5\x08\x8b\x67\x09\x1b\x39\x25\xff\x05\xe4\x1e\x46\x57\xc2\x01\x8c\x53\x2c\x0c\xf4\x01\x2e\xb9\x69\xb4\x68\x47\xb0\x3b\x17\x1b\x80\x0e\xf4\x13\xcf\x95\xe4\x08\x97\x4a\xcb\xa6\x2e\x91\xd0\x93\xa6\x98\x37\x47\x77\xd3\x80\xdd\xeb\xaa\x07\xf0\x27\xfd\x3f\x57\x0d\xd8\x03\x4c\x9d\x95\xce\x89\x1e\x57\x69\xfb\xf1\xd3\xd3\xa0\x4c\xb8\xb1\x30\xba\x8e\x44\xbc\xdd\xfd\xe3\x29\xda\x64\x1c\x85\xdd\xa9\x38\xab\x5f\x48\x57\x5b\x07\x95\xec\x06\xfa\x85\x74\xf6\x1a\x72\xe8\xed\x6c\xd0\xdf\xd2\xa7\x7e\xfe\x82\xd8\x4a\x29\x79\xb4\x95\x81\x60\x9f\x8d\x42\x30\xfe\xeb\x06\xb8\x04\xb3\xcb\xb9\x45\xbc\x85\xef\xbb\x68\x88\x65\x8b\x17\x65\x1e\x6b\xa0\x33\xa5\x21\xa1\x95\x78\xf6\x4e\x68\xb0\xe7\x0e\xed\x64\x9f\x61\x0e\x66\x8b\x7c\x4e\x2b\x91\x34\x05\x2f\xcf\x5c\x5a\xc6\x86\xa6\xa8\xca\x28\x4c\x79\xa9\xd2\xe5\x99\x7b\x83\x2e\xcf\xd8\x70\x70\x1f\x85\x9b\x6b\xd4\x86\x09\x9d\x77\xb7\x43\x6f\x40\x7a\xae\xe4\x26\xc8\xfd\x35\x7c\xd4\x64\x3c\xfd\x5d\xa7\x79\x5b\xb4\xfb\xb3\x7e\x15\x3f\x7a\x3e\xe6\x7a\xf0\x71\x70\x3f\xe8\x0d\xf3\xed\x73\xbe\xfe\x0c\x00\x00\xff\xff\xcd\x4c\x16\x88\x85\x08\x00\x00")

func clarchTemplatesHandlerHttpHttpTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesHandlerHttpHttpTpl,
		"clarch/templates/handler/http/http.tpl",
	)
}

func clarchTemplatesHandlerHttpHttpTpl() (*asset, error) {
	bytes, err := clarchTemplatesHandlerHttpHttpTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/handler/http/http.tpl", size: 2181, mode: os.FileMode(420), modTime: time.Unix(1522379430, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesProjectHandlerTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x41\x4f\x83\x40\x10\x85\xcf\xcc\xaf\x18\x39\x18\x68\x2a\xbd\x6b\x7a\xd1\x8b\xf1\xa0\x26\x4d\xbc\x9a\x75\x19\x96\xb1\x74\x96\x0c\x43\xa3\x21\xfc\x77\x03\xb5\x46\x6e\xbd\xbd\x7d\x79\xdf\xbe\x37\xad\xf3\x7b\x17\x08\x5b\x8d\x9f\xe4\x0d\x80\x0f\x6d\x54\xc3\x0c\x92\x34\xb0\xd5\xfd\x47\xe1\xe3\x61\xe3\x3a\xd7\xed\xe9\xc8\xbe\xde\x84\x78\x74\x0d\x97\xce\xa2\xa6\xcb\x50\x60\xb9\x09\x51\xd8\x4f\x2a\x85\x1c\xc0\xbe\x5b\xc2\x47\x27\x65\x43\xfa\x7a\x6a\xc0\xce\xb4\xf7\x36\x8c\x00\x55\x2f\x1e\x33\xab\xb9\xc3\xd5\x32\x94\xe3\xdb\xa9\x83\xee\x59\xca\xa7\xdd\xcb\x73\xe6\x71\x15\x58\x8a\x87\x28\x46\x5f\xb6\xc6\x88\x2c\x46\x5a\x39\x4f\xc3\x98\x23\xa9\x46\xc5\x01\x12\xae\x26\x8d\xb7\x5b\xf4\xc5\x1f\x7c\x1d\xf3\xbb\xd9\xbe\xda\xa2\x70\x33\xe5\x12\x25\xeb\x55\x26\x17\x92\x11\x66\xf0\x7d\x7d\x66\xff\x1d\x59\x9c\xa7\xec\xe6\xe1\xd9\x05\x5f\xfd\xbe\x85\x1b\x18\xe1\x27\x00\x00\xff\xff\xa3\x28\x87\x2a\x62\x01\x00\x00")

func clarchTemplatesProjectHandlerTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesProjectHandlerTpl,
		"clarch/templates/project/handler.tpl",
	)
}

func clarchTemplatesProjectHandlerTpl() (*asset, error) {
	bytes, err := clarchTemplatesProjectHandlerTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/project/handler.tpl", size: 354, mode: os.FileMode(420), modTime: time.Unix(1522216160, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesRepositoryGorm_repositoryTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\xcd\x8e\xd3\x30\x10\xc7\xcf\x99\xa7\x18\x7a\x88\xec\x55\xe4\xe5\x0c\xea\x81\xed\xc2\x6a\x2f\x08\x81\xf6\x84\x38\x84\x64\x9a\x9a\x26\x76\xe4\x38\x45\x25\xf2\xbb\x23\x3b\x69\x4a\xa5\xa6\x6a\x83\xb4\xb9\x39\xf3\xff\x98\x9f\xec\x3a\xcd\xb6\x69\x41\x68\xa8\xd6\x8d\xb4\xda\xec\x01\x64\x55\x6b\x63\x91\x41\xb4\x28\xa4\xdd\xb4\x3f\x45\xa6\xab\xfb\x5f\x52\xfd\xd9\xb4\xf7\x85\x36\xd5\xe2\x74\xd2\x75\xe2\x29\x9c\x5e\x1a\x32\xce\x1d\xcf\x5f\xc7\xd0\xfe\xef\x97\x6d\xe1\xdc\x02\x38\x80\xdd\xd7\x84\x3e\xaa\xeb\xc4\x2a\xad\xa8\x0c\xa3\xa3\x1e\x1b\x6b\xda\xcc\x62\x07\xd1\x4a\x2b\x85\x77\x5e\x2b\x1e\x1f\xc0\x01\xac\x5b\x95\xe1\x67\xfa\xfd\x34\x6d\x67\x27\x26\x8e\x53\x2d\x1d\x44\x86\x6c\x6b\x14\xc6\x17\x96\xe9\x7c\x9a\x1b\xab\x99\xdd\xc8\xa6\x0f\x9f\x30\x70\xfc\x24\x55\xfe\xa1\x2c\x19\x47\xf6\xfd\xc7\xdd\x01\x5d\x9c\xe8\x13\x24\x63\xb4\xe1\x7e\x0b\x69\xa9\xc2\x77\x4b\xac\xd2\x2d\x5d\x72\xbc\xe5\x10\xc9\xb5\x37\x7a\xb5\x5f\x44\xf8\xe5\x84\xef\x63\xb1\x4f\xe1\xe2\xa3\x4f\x7d\x1f\x34\x6f\x96\xa8\x64\xe9\x0b\x0e\x9c\x4a\x96\xa1\x17\x22\x37\xb2\x7b\x5b\xe2\x27\x37\x23\x3e\xec\x9f\x73\x26\x73\x94\xca\x72\x64\x57\x70\xee\x52\x13\xea\xf0\xbc\x74\x0a\xce\x34\xb6\xa7\x4b\x50\xe6\x33\x08\xe3\x79\x88\xdf\xac\x36\xc4\x76\x69\xd9\x12\x4e\xc0\x5d\x87\x7d\x8e\x6a\x65\x28\xb5\xc4\xe2\x10\x3f\x83\x29\xf8\x6e\x67\x7a\xa9\x73\x5f\xdb\x5f\x5a\x82\xff\x0f\x87\xc3\x17\x92\xc4\x73\x8e\x4b\x94\xf9\x79\xe4\xa1\xfb\xb5\x91\x1f\xa9\xa4\x11\x99\xf7\x9b\xcf\x7e\x8c\x43\xd8\xb5\xaf\x71\x20\x80\x7f\xb0\xc0\xc1\xdf\x00\x00\x00\xff\xff\x01\xa4\xc6\xe8\x76\x05\x00\x00")

func clarchTemplatesRepositoryGorm_repositoryTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesRepositoryGorm_repositoryTpl,
		"clarch/templates/repository/gorm_repository.tpl",
	)
}

func clarchTemplatesRepositoryGorm_repositoryTpl() (*asset, error) {
	bytes, err := clarchTemplatesRepositoryGorm_repositoryTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/repository/gorm_repository.tpl", size: 1398, mode: os.FileMode(420), modTime: time.Unix(1522379244, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesRepositoryRepositoryTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xbf\x6a\xc3\x30\x10\x87\xe7\xea\x29\x0e\x4f\x72\x31\xea\x33\xf4\x0f\x2d\xdd\x4a\x83\xa7\x90\x41\xb1\x2e\x8e\xb0\x6c\x89\xf3\x65\x30\x42\xef\x1e\x6c\x27\x31\x19\x42\x02\x19\xef\xc7\xf7\x7d\x5c\xd0\x55\xa3\x6b\x04\xc2\xe0\x7b\xcb\x9e\x06\x21\x6c\x1b\x3c\x31\x64\xb5\xe5\xfd\x61\xab\x2a\xdf\xbe\xc5\xa8\x7e\xa6\xab\xec\x91\x52\x5a\xee\xff\x8b\x37\xaf\x7f\x4d\x9d\x52\x26\x04\x0f\x01\x21\x46\xf5\xa9\x5b\x74\xd3\xb8\x90\x60\x3b\x46\xda\xe9\x0a\x21\x8a\x97\x6f\xdb\x99\x77\xe7\x64\x0e\x72\xbd\x79\x3d\x27\xd4\x95\x5b\x00\x12\x79\xca\x67\xfa\x63\xf8\x35\xd2\x9a\x31\x93\x83\xbc\xab\xac\xd8\x13\xde\xc2\x1e\x09\x94\xc1\x68\x46\x69\x3b\x2e\xe0\x89\xcc\x17\x3a\x1c\x33\xa7\xc7\xa7\x59\x24\x71\x0c\x00\x00\xff\xff\x0d\x92\x87\x3a\x82\x01\x00\x00")

func clarchTemplatesRepositoryRepositoryTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesRepositoryRepositoryTpl,
		"clarch/templates/repository/repository.tpl",
	)
}

func clarchTemplatesRepositoryRepositoryTpl() (*asset, error) {
	bytes, err := clarchTemplatesRepositoryRepositoryTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/repository/repository.tpl", size: 386, mode: os.FileMode(420), modTime: time.Unix(1522332678, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesUsecaseUsecaseTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x4b\x8f\xd3\x30\x10\xc7\xcf\xf6\xa7\x18\x72\x40\x36\x8a\xb2\xf7\x95\x7a\xe0\x21\x10\x97\x0a\x81\x7a\x42\x08\x85\x64\xd2\xb5\xd6\xb5\x23\xdb\x61\xa9\xa2\x7c\x77\x64\xe7\xd5\xec\xf6\x91\x10\xd1\x9b\xdd\x99\xff\xfc\xe7\x37\xe3\x94\x69\xf6\x98\xee\x11\x2a\x8b\x59\x6a\x91\x52\x71\x28\xb5\x71\xc0\x28\x89\xd0\x18\x6d\x6c\x44\x49\xb4\x17\xee\xa1\xfa\x95\x64\xfa\x70\x57\xd7\xc9\xa7\x70\xda\x59\x34\x4d\x33\x9e\xbf\x62\xa9\xad\x70\xda\x1c\xdb\xdb\x2f\x8f\xfb\xa6\x59\x95\x7c\x67\x86\xdb\x88\x72\x4a\xdd\xb1\x44\xa8\xeb\xe4\x7d\x7a\x40\x19\x22\x76\xad\x6b\x10\xca\xa1\x29\xd2\x0c\xa1\xa6\xe4\xa3\x50\xf9\x5b\x29\x19\x07\xf6\xfd\xc7\x9b\x5e\x2c\x99\x24\xc6\x10\x9a\xe3\x6d\xf4\xbb\xe3\xe7\x9c\x89\xdc\xcb\x70\x60\x37\x53\xbe\x39\x6d\xf0\x52\xd8\x1c\x81\x5d\x99\xa7\x0e\x99\x50\x2e\x86\x15\x32\x1f\x50\xa2\x97\xe9\x8c\x87\x6b\xda\x8c\x9c\x26\x88\xac\x33\x55\xe6\x3c\x9f\xfe\x1f\xcf\x1c\x46\xc4\xd3\x2a\xe3\x40\xbc\x62\x51\xa9\x0c\xb6\xf8\x74\x0e\x3e\x33\x33\x44\xf8\xf9\xb9\xd5\x94\x18\x74\x95\x51\xf0\xfa\x99\xdf\x9a\x92\x89\xd1\x7b\x30\x31\x25\xcd\x60\x86\xb9\x07\x61\x47\x78\x5d\x16\x87\x25\xc3\x6f\xcb\xdb\x70\x84\xfb\x0d\x78\xc9\xe4\xb4\x68\x32\xa8\x51\x22\x8a\x10\xf6\x6a\x03\x4a\x48\x9f\xd9\x3b\x57\x42\x06\x05\xef\xae\xbf\x0b\xaa\x4a\xc8\x59\x76\x17\x6d\xdf\x3c\xcf\x9d\xe4\x7f\xb3\xdd\xbe\x80\xdf\xa9\xac\xf0\xdf\x17\xf8\x64\xfa\x2f\xbb\x38\xa9\xc0\x6f\xda\xe9\xdf\x53\x60\x18\xc3\x7a\x5f\xd0\xfd\xf0\x8f\xb0\x0e\xf3\x45\xb4\xdb\x14\xd8\x5c\x24\xae\x8d\x4d\xb6\xf8\xc4\xa2\xad\x76\x50\xe8\x4a\xe5\x11\x0f\x53\x58\x34\xab\x97\x56\x06\x0a\x1d\x81\xdb\xdc\xce\x7d\x40\x7c\xdd\xa1\xed\x9f\xab\x9b\xbe\xd2\x2f\x25\x17\xa9\x0e\xc6\xae\x6d\xf0\x33\x20\xed\xde\xfe\x0d\x00\x00\xff\xff\x39\x0b\x40\x2c\xd0\x06\x00\x00")

func clarchTemplatesUsecaseUsecaseTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesUsecaseUsecaseTpl,
		"clarch/templates/usecase/usecase.tpl",
	)
}

func clarchTemplatesUsecaseUsecaseTpl() (*asset, error) {
	bytes, err := clarchTemplatesUsecaseUsecaseTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/usecase/usecase.tpl", size: 1744, mode: os.FileMode(420), modTime: time.Unix(1522335917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"clarch/templates/entity.tpl": clarchTemplatesEntityTpl,
	"clarch/templates/handler/http/hander_test.tpl": clarchTemplatesHandlerHttpHander_testTpl,
	"clarch/templates/handler/http/http.tpl": clarchTemplatesHandlerHttpHttpTpl,
	"clarch/templates/project/handler.tpl": clarchTemplatesProjectHandlerTpl,
	"clarch/templates/repository/gorm_repository.tpl": clarchTemplatesRepositoryGorm_repositoryTpl,
	"clarch/templates/repository/repository.tpl": clarchTemplatesRepositoryRepositoryTpl,
	"clarch/templates/usecase/usecase.tpl": clarchTemplatesUsecaseUsecaseTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"clarch": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"entity.tpl": &bintree{clarchTemplatesEntityTpl, map[string]*bintree{}},
			"handler": &bintree{nil, map[string]*bintree{
				"http": &bintree{nil, map[string]*bintree{
					"hander_test.tpl": &bintree{clarchTemplatesHandlerHttpHander_testTpl, map[string]*bintree{}},
					"http.tpl": &bintree{clarchTemplatesHandlerHttpHttpTpl, map[string]*bintree{}},
				}},
			}},
			"project": &bintree{nil, map[string]*bintree{
				"handler.tpl": &bintree{clarchTemplatesProjectHandlerTpl, map[string]*bintree{}},
			}},
			"repository": &bintree{nil, map[string]*bintree{
				"gorm_repository.tpl": &bintree{clarchTemplatesRepositoryGorm_repositoryTpl, map[string]*bintree{}},
				"repository.tpl": &bintree{clarchTemplatesRepositoryRepositoryTpl, map[string]*bintree{}},
			}},
			"usecase": &bintree{nil, map[string]*bintree{
				"usecase.tpl": &bintree{clarchTemplatesUsecaseUsecaseTpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

