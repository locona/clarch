// Code generated by go-bindata.
// sources:
// clarch/templates/entity.tpl
// clarch/templates/handler/http/hander_test.tpl
// clarch/templates/handler/http/http.tpl
// clarch/templates/project/handler.tpl
// clarch/templates/repository/gorm_repository.tpl
// clarch/templates/repository/repository.tpl
// clarch/templates/usecase/usecase.tpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clarchTemplatesEntityTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xa8\xae\xd6\x0b\xc8\x4e\xaf\xad\xe5\xe2\x2a\xa9\x2c\x00\x73\x9d\x13\x73\x53\x73\xc0\x62\x0a\xc5\x25\x45\xa5\xc9\x25\x0a\xd5\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\x33\x30\xd3\xc9\x30\x00\x00\x00")

func clarchTemplatesEntityTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesEntityTpl,
		"clarch/templates/entity.tpl",
	)
}

func clarchTemplatesEntityTpl() (*asset, error) {
	bytes, err := clarchTemplatesEntityTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/entity.tpl", size: 48, mode: os.FileMode(420), modTime: time.Unix(1522148439, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesHandlerHttpHander_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\x4f\x4f\xdc\x3e\x10\x3d\xc7\x9f\xc2\xca\xe1\xa7\x04\xe5\xe7\x70\x46\xe2\x40\x03\x94\xd2\x0a\x10\xb0\xa7\xaa\xaa\x1c\x67\xc8\x9a\x24\xb6\x3b\x9e\x14\x56\x51\xbe\x7b\xe5\xec\x9f\x2e\xe9\xb6\x52\x7b\x49\x3c\x7f\x9e\xe7\xcd\xf3\x73\x52\x35\xb2\x06\xbe\x24\x72\x8c\xe9\xce\x59\x24\x9e\xb0\x28\x36\x40\x79\x48\xc6\x7b\xe7\xe9\x43\xe0\x29\x24\xc3\x5f\x9b\x3a\x66\x2c\x8a\x6b\x4d\xcb\xbe\x14\xca\x76\xf9\x30\x88\xf7\x53\xb4\xf0\x80\xe3\xf8\x33\xbe\x07\x67\xbd\x26\x8b\xab\x71\xcc\x9f\x6d\x19\xff\x23\x2e\xef\x3d\x28\xe9\x21\xef\xac\x6a\xfc\xec\x96\xf2\x55\xd9\x0a\x54\xfe\x24\x1b\xc0\x59\xad\xd6\xe6\xff\xda\x1a\xad\xc2\x69\x56\x6b\x8e\x9b\xbe\xec\x4d\xee\xdc\xac\xe0\x09\x81\xd4\x12\xf3\x69\xdd\xa7\x55\x2e\xbd\x07\xa4\x98\xa5\x8c\x3d\xf5\x46\xf1\x47\xf0\x74\xa9\x4d\x75\xd6\xb6\x09\xf1\xa3\x8d\x2a\xe2\x31\xe5\x03\x8b\xbe\x4b\xe4\x1d\x1f\x06\x71\xd7\xd4\xe3\x28\x86\x41\x14\xb2\x83\x76\x8a\x58\x04\x88\xfc\xe4\x94\x4f\x5c\xc5\xa5\x6c\xe0\x5c\x92\x4c\xfe\xeb\x52\x16\xad\xa7\x88\x1b\x7b\x81\x68\x31\xa1\x8c\x03\x62\xca\x58\x14\x96\x5e\x14\xd2\x43\x40\x1a\x78\x49\x26\x15\xc4\xb5\x0d\xba\x05\x59\xd2\x75\xcf\xb5\x2d\x3f\x69\x4f\xa1\xab\x93\x0d\x24\x9f\xbf\x1c\x1d\xa6\x91\xf1\xe3\x19\xe4\x94\x4b\xe7\xc0\x54\xc9\x5e\x32\xe3\x13\xad\xdd\x74\x71\x6b\x92\x78\xb3\x76\x9c\x8a\x7b\xa0\x1e\xcd\x5b\x80\xd1\x6d\x20\x8c\xe0\x03\x89\xad\x73\xc4\x0d\xbc\xdc\x83\xb2\x58\x01\x26\x29\x8b\x54\xc6\xbf\x86\x7a\xad\x8d\x28\x10\x24\x41\x10\xb4\xb0\x86\xe0\x95\x12\x04\x9f\xb2\x68\x29\x4d\xd5\xc2\xa4\xd5\x15\x91\xbb\xb6\xe5\xd5\x3a\x33\xb0\x28\xda\x6e\xb5\x28\x4e\xf8\x8e\x5e\xc6\xa2\x71\x87\x13\xdb\xe7\x51\x81\x8f\x73\xe2\x0e\xb5\xa1\xd6\x6c\x6e\xdf\x48\x7d\xf1\xad\x97\x6d\x10\x3a\x30\x15\x0f\x24\xa9\xf7\xb7\x1f\x33\x8e\xe0\x45\x61\x2b\x78\xb3\xfd\xd9\x84\xb9\x78\x75\xa0\x48\x92\xb6\xc6\x27\x94\xb2\x71\x66\x89\x77\xab\x0f\xd5\x61\x4f\x3c\xff\xad\x27\x9e\x7f\xef\x89\xfd\xa9\x0f\x64\x11\x7e\x19\xb9\xdf\xb1\x70\x95\xa4\x3f\xb7\x9c\x43\x0b\x07\x5b\x7e\x04\x00\x00\xff\xff\x10\x87\xfd\x44\x2c\x04\x00\x00")

func clarchTemplatesHandlerHttpHander_testTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesHandlerHttpHander_testTpl,
		"clarch/templates/handler/http/hander_test.tpl",
	)
}

func clarchTemplatesHandlerHttpHander_testTpl() (*asset, error) {
	bytes, err := clarchTemplatesHandlerHttpHander_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/handler/http/hander_test.tpl", size: 1068, mode: os.FileMode(420), modTime: time.Unix(1522223455, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesHandlerHttpHttpTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\xc1\x6f\xda\x30\x14\xc6\xcf\xf1\x5f\xe1\xe6\x50\x25\x15\x33\xf7\x56\x1c\x06\x65\xd0\x6d\x2a\xa8\x14\xed\xec\xd9\x8f\xe0\x35\xd8\x99\xfd\xb2\x15\xa1\xfc\xef\x93\x9d\x00\x62\x4b\x26\xd1\x6e\xd2\x76\x02\xdb\xef\x7d\xfe\x7e\x9f\x13\xa7\xe0\xe2\x89\x67\x40\xd7\x88\x05\x21\x6a\x53\x18\x8b\x34\x21\x51\xac\x01\xfb\x7e\x32\x26\x24\x8a\x33\x85\xeb\xf2\x33\x13\x66\xd3\xdf\xed\xd8\x24\x8c\x96\x0e\x6c\x55\x1d\xc7\x0f\x50\x18\xa7\xd0\xd8\x6d\x3d\x3b\x7f\xca\xaa\x2a\x7e\x4d\x73\xbf\x74\x20\xb8\x83\x17\x89\x14\xd6\x7c\x01\x81\x3f\xf5\x66\x4a\xbf\xc9\x8c\x56\xc2\xff\x8b\x49\x4a\x08\xc1\x6d\x01\x74\x8a\x58\xec\x76\x6c\xc4\x37\x90\x87\xbd\xa7\x5c\xcb\x1c\x2c\x75\x68\x4b\x81\x74\x47\xa2\x46\x90\x35\x2b\xf3\x7a\x48\xa2\xbd\xdb\xe5\x88\x36\x7e\xd9\x89\xd2\xd2\xc1\x88\x3b\x20\x15\x21\xab\x52\x0b\x9a\xe0\x5a\x39\x7a\xd5\xb5\x63\x4a\xdf\x29\x2d\xdf\xe6\x79\x22\xe8\x55\xa6\x34\x1b\x19\x8d\xf0\x8c\xa9\xf7\x90\x2b\x87\x3d\x0a\xd6\xd2\xeb\x01\xf5\x3a\xec\xb8\x3b\xdb\xf7\xa5\x24\x52\xab\x50\x74\x31\xa0\x5a\xe5\xbe\x31\x12\xec\xfd\x62\x76\x9f\xf8\x13\x65\x0b\xe4\x58\xba\x21\x97\x0f\xf0\xb5\x84\x46\x31\x25\x51\x64\x01\x4b\xab\x49\x54\x11\xd2\xd2\x30\xfb\xd0\xa3\xde\x40\x7a\x1e\xca\x70\x7b\x27\xdb\x58\x94\xf4\x10\x82\x4d\x00\xef\x34\x26\xb1\x92\xb1\x77\x8e\xb0\xf9\x2d\x61\x90\x53\xf2\x4f\x40\x76\x30\x7a\x0b\x67\x30\x2e\xd0\x58\x68\x03\xfc\xc6\x2d\x35\x74\x6f\xff\xf4\xa1\x38\xb8\x0f\x11\x0c\x95\x96\xc1\xc9\xa5\x49\x6f\x5e\x7d\x72\x16\x5c\x67\x82\xb5\xd9\x4b\xf3\x17\xe3\xb3\xe0\xce\x48\x6f\x59\x48\x8e\xff\x4d\x7c\x8d\xdb\x7f\x28\xbf\x5b\xc8\xa1\x3d\xbf\x8e\xf7\x6b\xd5\xc5\xd6\x28\x29\x99\xde\x80\xb5\x17\x03\xad\xf2\x17\x41\xe1\x33\xfb\x64\x15\x82\xad\x7f\xa6\xc0\x25\xd8\x53\xc8\x23\xdf\x3d\x7c\x3f\xe5\x42\x2c\x1a\xb6\x24\xab\x99\xc6\x3a\x53\x1a\x7a\xb4\x14\x9d\xf7\xab\x9f\x0c\xcc\x6b\x0f\x76\xd9\x95\x96\xc7\x39\x02\x5f\xd3\x52\xf4\x82\xe5\x8c\x4d\xc6\x8f\x49\x7c\xf8\xee\xb8\xb8\x47\xd7\xfb\xeb\x34\x6d\x59\xef\x5f\x2b\x79\xa8\xf1\x17\x52\x28\x9a\xcf\x16\xbf\xaa\x84\x17\xae\x5e\x5e\xb6\x6b\xd4\xcf\x54\x28\xb9\x1d\x7f\x1c\x3f\x8e\x5b\xab\xea\xd3\xf1\xc1\xfd\x08\x00\x00\xff\xff\x84\xf7\xef\x62\xb2\x07\x00\x00")

func clarchTemplatesHandlerHttpHttpTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesHandlerHttpHttpTpl,
		"clarch/templates/handler/http/http.tpl",
	)
}

func clarchTemplatesHandlerHttpHttpTpl() (*asset, error) {
	bytes, err := clarchTemplatesHandlerHttpHttpTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/handler/http/http.tpl", size: 1970, mode: os.FileMode(420), modTime: time.Unix(1522317652, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesProjectHandlerTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x41\x4f\x83\x40\x10\x85\xcf\xcc\xaf\x18\x39\x18\x68\x2a\xbd\x6b\x7a\xd1\x8b\xf1\xa0\x26\x4d\xbc\x9a\x75\x19\x96\xb1\x74\x96\x0c\x43\xa3\x21\xfc\x77\x03\xb5\x46\x6e\xbd\xbd\x7d\x79\xdf\xbe\x37\xad\xf3\x7b\x17\x08\x5b\x8d\x9f\xe4\x0d\x80\x0f\x6d\x54\xc3\x0c\x92\x34\xb0\xd5\xfd\x47\xe1\xe3\x61\xe3\x3a\xd7\xed\xe9\xc8\xbe\xde\x84\x78\x74\x0d\x97\xce\xa2\xa6\xcb\x50\x60\xb9\x09\x51\xd8\x4f\x2a\x85\x1c\xc0\xbe\x5b\xc2\x47\x27\x65\x43\xfa\x7a\x6a\xc0\xce\xb4\xf7\x36\x8c\x00\x55\x2f\x1e\x33\xab\xb9\xc3\xd5\x32\x94\xe3\xdb\xa9\x83\xee\x59\xca\xa7\xdd\xcb\x73\xe6\x71\x15\x58\x8a\x87\x28\x46\x5f\xb6\xc6\x88\x2c\x46\x5a\x39\x4f\xc3\x98\x23\xa9\x46\xc5\x01\x12\xae\x26\x8d\xb7\x5b\xf4\xc5\x1f\x7c\x1d\xf3\xbb\xd9\xbe\xda\xa2\x70\x33\xe5\x12\x25\xeb\x55\x26\x17\x92\x11\x66\xf0\x7d\x7d\x66\xff\x1d\x59\x9c\xa7\xec\xe6\xe1\xd9\x05\x5f\xfd\xbe\x85\x1b\x18\xe1\x27\x00\x00\xff\xff\xa3\x28\x87\x2a\x62\x01\x00\x00")

func clarchTemplatesProjectHandlerTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesProjectHandlerTpl,
		"clarch/templates/project/handler.tpl",
	)
}

func clarchTemplatesProjectHandlerTpl() (*asset, error) {
	bytes, err := clarchTemplatesProjectHandlerTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/project/handler.tpl", size: 354, mode: os.FileMode(420), modTime: time.Unix(1522216160, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesRepositoryGorm_repositoryTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x41\x6f\xe2\x30\x10\x85\xcf\x99\x5f\x31\xcb\x01\xd9\x08\x99\x3d\xef\x8a\x43\x81\x16\xf5\x52\x55\xad\x38\x55\x3d\xa4\x89\x09\x2e\x89\x1d\x4d\x9c\x56\x34\xf2\x7f\xaf\x1c\x20\x14\x89\x50\x8a\x54\x8e\xb6\xdf\xbc\xf7\x3e\x79\xf2\x30\x5a\x86\x89\x44\x92\xb9\x29\x94\x35\xb4\x02\x50\x59\x6e\xc8\x22\x83\xa0\x93\x28\xbb\x28\x5f\x44\x64\xb2\xc1\xab\xd2\x1f\x8b\x72\x90\x18\xca\x3a\xfb\x2f\x55\x25\xa6\xf5\x69\x56\x48\x72\x6e\x77\x7e\x68\x4c\xd7\xb7\xf7\xcb\xc4\xb9\x0e\x70\x00\xbb\xca\x25\x7a\xab\xaa\x12\xe3\x30\x93\x69\xfd\xb4\xd3\x63\x61\xa9\x8c\x2c\x56\x10\x8c\x8d\xd6\xd8\xf3\x5a\x31\x19\x81\x03\x98\x97\x3a\xc2\x3b\xf9\x3e\x6d\x1f\x67\x7b\x43\x1c\xdb\x52\x2a\x08\x48\xda\x92\x34\x76\x8f\x94\xa9\xbc\x9b\x6b\xa2\x99\x5d\xa8\x62\x6d\xde\x32\xc0\xf1\x46\xe9\xf8\x2a\x4d\x19\x47\xf6\xf4\xdc\xdb\xa2\x8b\x3d\x7d\x1f\x25\x91\x21\xee\x5b\x18\xfc\x37\xc4\x2c\x5c\xca\x63\xf2\xbf\x1c\x02\x35\xf7\x53\x5e\xed\x5b\x08\xdf\x4c\xf8\x30\xd6\x35\x5c\x5c\x7b\xbf\xff\xb5\xe0\xcf\x10\xb5\x4a\xbd\xf5\x96\x50\xab\xb4\x4e\x84\xc0\x35\xd4\xa6\xef\xaf\x7f\x4c\x36\x5a\xdd\xc6\x4c\xc5\xa8\xb4\xe5\xc8\x4e\xc0\x7b\x0b\x09\x0d\x1e\xd6\xb5\x31\x51\x61\xcf\x83\xea\x9e\x41\xf5\x68\x0d\x49\x66\xb0\x85\xe5\x34\xca\x43\x1c\x63\x92\xa1\x95\x17\xfb\x9d\x59\x1e\xfb\xb8\x5f\x00\xd9\x38\x5f\x0a\x64\x22\x53\x69\x65\xb3\x64\x75\xb7\xf3\x36\x69\xe3\xe4\xb7\x42\xc5\xdf\x94\xdf\xf4\x86\x2f\x30\xe0\xe0\x33\x00\x00\xff\xff\xaa\x3d\x2e\x3e\x24\x05\x00\x00")

func clarchTemplatesRepositoryGorm_repositoryTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesRepositoryGorm_repositoryTpl,
		"clarch/templates/repository/gorm_repository.tpl",
	)
}

func clarchTemplatesRepositoryGorm_repositoryTpl() (*asset, error) {
	bytes, err := clarchTemplatesRepositoryGorm_repositoryTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/repository/gorm_repository.tpl", size: 1316, mode: os.FileMode(420), modTime: time.Unix(1522317767, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesRepositoryRepositoryTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xcf\x8a\xc2\x30\x10\x87\xcf\x9b\xa7\x18\x7a\x4a\x97\x25\xfb\x0c\xfb\x07\xc5\x9b\x28\x3d\x89\x87\xd8\x8c\x35\x34\x6d\xc2\x74\x3c\x94\x90\x77\x17\x5b\x6c\xf1\x20\x0a\x1e\xe7\xc7\xf7\x7d\x4c\xd0\x65\xad\x2b\x04\xc2\xe0\x3b\xcb\x9e\x7a\x21\x6c\x13\x3c\x31\x64\x95\xe5\xd3\xf9\xa0\x4a\xdf\x7c\xc7\xa8\x96\xc3\x55\x74\x48\x29\xcd\xf7\x66\xf2\xc6\x75\x5d\x57\x29\x65\x42\x70\x1f\x10\x62\x54\x7f\xba\x41\x37\x8c\x33\x09\xb6\x65\xa4\xa3\x2e\x11\xa2\xf8\x58\xd8\xd6\xfc\x38\x27\x73\x90\xbb\xfd\xe7\x2d\xa1\xee\xdc\x2f\x40\x22\x4f\xf9\x48\xff\xf6\x2b\x23\xad\xb9\x66\x72\x90\x4f\x95\x2d\x7b\xc2\x47\xd8\x2b\x81\x22\x18\xcd\x6f\x15\xfe\xd1\x21\xe3\xf4\xf3\x30\x8b\x24\x2e\x01\x00\x00\xff\xff\xc7\x61\xa2\x2e\x7d\x01\x00\x00")

func clarchTemplatesRepositoryRepositoryTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesRepositoryRepositoryTpl,
		"clarch/templates/repository/repository.tpl",
	)
}

func clarchTemplatesRepositoryRepositoryTpl() (*asset, error) {
	bytes, err := clarchTemplatesRepositoryRepositoryTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/repository/repository.tpl", size: 381, mode: os.FileMode(420), modTime: time.Unix(1522148439, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesUsecaseUsecaseTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcb\xca\xdb\x30\x10\x85\xd7\xd2\x53\x4c\xbd\x28\xd2\x4f\x70\xf6\x81\x2c\x7a\xa1\xa5\x9b\x50\x5a\xb2\x2a\xa5\xb8\xf6\x38\x51\xe3\x48\x46\x92\x49\x83\xf1\xbb\x17\x49\xb1\x1d\xe7\xea\x62\xfe\xa5\x26\x33\x47\x5f\xce\x19\xb9\x4c\xd2\x5d\xb2\x41\xa8\x0c\xa6\x89\x41\x4a\xc5\xbe\x54\xda\x02\xa3\x24\x42\xad\x95\x36\x11\x25\xd1\x46\xd8\x6d\xf5\x3b\x4e\xd5\x7e\x5e\xd7\xf1\x67\x7f\x5a\x1b\xd4\x4d\xd3\x9f\xbf\x61\xa9\x8c\xb0\x4a\x1f\x43\xf5\xeb\x6e\xd3\x34\x93\x86\xe7\xba\xab\x46\x94\x53\x6a\x8f\x25\x42\x5d\xc7\x1f\x92\x3d\x16\xbe\x63\x1d\xa8\x41\x48\x8b\x3a\x4f\x52\x84\x9a\x92\x4f\x42\x66\xef\x8a\x82\x71\x60\x3f\x7e\xbe\xb4\x62\xf1\x60\x70\x06\xfe\xcf\xf1\xd0\xfd\xfe\xf8\x25\x63\x22\x73\x32\x1c\xd8\xd3\x91\xef\x56\x69\xbc\xd7\x36\x46\x60\x5d\x66\x89\x9d\xa4\xf0\x11\x0b\xb4\xd8\x31\xfb\x32\x6d\x7a\x8b\x06\xee\x18\xab\xab\xd4\x3a\x6b\xda\x5f\x9c\xdd\xd0\xbb\x3b\xbc\xa5\xcf\xc2\x29\xe6\x95\x4c\x61\x85\x87\x5b\xbe\x33\x3d\x42\x84\xdf\x8e\xac\xa6\x44\xa3\xad\xb4\x84\xb7\x17\xbc\x35\x25\x03\xd0\x05\xe8\x19\x25\x4d\x07\xc3\xec\x56\x18\x78\xb9\x98\xe2\x70\x96\xfb\x13\xff\xc2\xe5\xc6\x1f\x61\xb1\x04\x27\x18\x9f\x5f\x19\x77\x5a\x94\x88\xdc\xb7\xbd\x59\x82\x14\x85\x9b\x6c\xb9\xa5\x28\xbc\x82\x63\x6b\x6b\x5e\x55\x8a\x62\x14\xec\x7f\xad\xdd\x38\xe6\x93\xe4\xab\x61\x4f\x5c\xfd\xb3\xd4\xaf\xf9\x83\xf6\x1f\xfe\x14\x62\xea\xf3\x79\x48\x71\x12\x1f\x81\x71\xeb\x0d\x3a\x69\xfc\x2b\x8c\xc5\x6c\x06\xbf\xc6\xe6\x14\x06\x60\x79\x95\x55\xf8\x02\xc7\x2b\x3c\xb0\x68\xa5\x2c\xe4\xaa\x92\x59\xc4\x5d\x74\x94\xdc\x5d\x84\x0e\xec\xd1\x1a\x5c\x6c\x40\x08\xff\x5f\x00\x00\x00\xff\xff\x46\x6e\x74\xd7\x0e\x06\x00\x00")

func clarchTemplatesUsecaseUsecaseTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesUsecaseUsecaseTpl,
		"clarch/templates/usecase/usecase.tpl",
	)
}

func clarchTemplatesUsecaseUsecaseTpl() (*asset, error) {
	bytes, err := clarchTemplatesUsecaseUsecaseTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/usecase/usecase.tpl", size: 1550, mode: os.FileMode(420), modTime: time.Unix(1522317806, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"clarch/templates/entity.tpl": clarchTemplatesEntityTpl,
	"clarch/templates/handler/http/hander_test.tpl": clarchTemplatesHandlerHttpHander_testTpl,
	"clarch/templates/handler/http/http.tpl": clarchTemplatesHandlerHttpHttpTpl,
	"clarch/templates/project/handler.tpl": clarchTemplatesProjectHandlerTpl,
	"clarch/templates/repository/gorm_repository.tpl": clarchTemplatesRepositoryGorm_repositoryTpl,
	"clarch/templates/repository/repository.tpl": clarchTemplatesRepositoryRepositoryTpl,
	"clarch/templates/usecase/usecase.tpl": clarchTemplatesUsecaseUsecaseTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"clarch": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"entity.tpl": &bintree{clarchTemplatesEntityTpl, map[string]*bintree{}},
			"handler": &bintree{nil, map[string]*bintree{
				"http": &bintree{nil, map[string]*bintree{
					"hander_test.tpl": &bintree{clarchTemplatesHandlerHttpHander_testTpl, map[string]*bintree{}},
					"http.tpl": &bintree{clarchTemplatesHandlerHttpHttpTpl, map[string]*bintree{}},
				}},
			}},
			"project": &bintree{nil, map[string]*bintree{
				"handler.tpl": &bintree{clarchTemplatesProjectHandlerTpl, map[string]*bintree{}},
			}},
			"repository": &bintree{nil, map[string]*bintree{
				"gorm_repository.tpl": &bintree{clarchTemplatesRepositoryGorm_repositoryTpl, map[string]*bintree{}},
				"repository.tpl": &bintree{clarchTemplatesRepositoryRepositoryTpl, map[string]*bintree{}},
			}},
			"usecase": &bintree{nil, map[string]*bintree{
				"usecase.tpl": &bintree{clarchTemplatesUsecaseUsecaseTpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

