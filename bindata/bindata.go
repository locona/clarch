// Code generated by go-bindata.
// sources:
// clarch/templates/handler/http/hander_test.tpl
// clarch/templates/handler/http/http.tpl
// clarch/templates/handler/http/params.tpl
// clarch/templates/model.tpl
// clarch/templates/project/config.tpl
// clarch/templates/project/handler.tpl
// clarch/templates/project/middleware/middleware.tpl
// clarch/templates/project/repository.tpl
// clarch/templates/repository/repository.tpl
// clarch/templates/usecase/usecase.tpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clarchTemplatesHandlerHttpHander_testTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\x4f\x6f\x9c\x3e\x10\x3d\xe3\x4f\x61\x71\xf8\x09\x22\x7e\x26\xe7\x48\x39\xa4\x64\xa3\x74\x5b\x25\xd1\x26\x7b\xaa\xaa\xca\x98\x59\x96\x05\x6c\x77\x3c\x34\x1b\x21\xbe\x7b\x65\xf6\x8f\x36\x74\x5b\xa9\xbd\x80\x99\x99\xe7\x79\xef\xf1\xac\x54\xb5\x2c\x81\xaf\x89\x2c\x63\x55\x6b\x0d\x12\x8f\x58\x10\x6a\xa0\xd4\x17\xc3\x93\xf3\xf8\x20\x70\xe4\x8b\xfe\x5d\xe9\x32\x64\x2c\x08\xcb\x8a\xd6\x5d\x2e\x94\x69\xd3\xbe\x17\x59\x87\x08\x9a\x96\x0e\x70\x18\x4e\x0a\x0b\xb0\x66\x18\xd2\x8d\xc9\xc3\x7f\xc0\xa4\x9d\x03\x25\x1d\xa4\xad\x51\xb5\x9b\xdc\x90\x6f\x95\x29\x40\xa5\x2b\x59\x03\x4e\x7a\x65\xa5\xff\x2f\x8d\xae\x94\x3f\x4d\x7a\xf5\x65\xdd\xe5\x9d\x4e\xad\x9d\x34\x1c\x21\x90\x5a\x63\x3a\xca\x5c\xbd\xa5\xd2\x39\x40\x0a\x59\xcc\xd8\xaa\xd3\x8a\xbf\x80\xa3\xbb\x4a\x17\x37\x4d\x13\x11\xbf\xd8\xbb\x21\x5e\x62\xde\xb3\xe0\x87\x44\xde\xf2\xbe\x17\x4f\x75\x39\x0c\xc2\xcb\x91\x2d\x34\xe3\x17\x0b\x00\x91\x5f\x5d\xf3\x91\xab\xb8\x93\x35\xdc\x4a\x92\xd1\x7f\x6d\xcc\x82\xdd\x16\xf1\x60\x66\x88\x06\x23\x4a\x38\x20\xc6\x8c\x05\x5e\xf4\x32\x93\x0e\x3c\x52\xc3\x6b\x34\xba\x20\xe6\x26\x5f\xee\x6c\x89\x77\x33\x73\x93\x7f\xae\x1c\xf9\xa9\x56\xd6\x10\x7d\xf9\x7a\x71\x9e\x46\xc2\x2f\x27\x90\x6b\x2e\xad\x05\x5d\x44\x27\xc5\x84\x8f\xb4\x8e\xdb\xc5\xa3\x8e\xc2\xbd\xec\x30\x16\x0b\xa0\x0e\xf5\x7b\x80\xae\x1a\x4f\x18\xc1\x79\x12\x87\xc4\x88\x07\x78\x5d\x80\x32\x58\x00\x46\x31\x0b\x54\xc2\xbf\xf9\x7e\x59\x69\x91\x21\x48\x02\x6f\x68\x66\x34\xc1\x96\x22\x04\x17\xb3\x60\x2d\x75\xd1\xc0\xe8\xd5\x3d\x91\x9d\x9b\xfc\x7e\x57\xe9\x59\x10\x1c\x54\x2d\xb3\x2b\x7e\xa4\x97\xb0\x60\x38\xe2\xc4\xe1\xf7\x28\xcf\xc7\x5a\xf1\x84\x95\xa6\x46\xef\x6f\xdf\x5b\x3d\xfb\xde\xc9\xc6\x1b\xed\x99\x8a\x67\x92\xd4\xb9\xc7\x4f\x09\x47\x70\x22\x33\x05\xbc\x53\x7f\x33\x62\x66\x5b\x0b\x8a\x24\x55\x46\xbb\x88\x62\x36\x4c\x22\xf1\xe1\xed\x63\x71\x3e\x13\x9b\xbf\xcd\xc4\xe6\xf7\x99\x38\xdd\xfa\x4c\x06\xe1\x97\x95\xa7\x13\x4b\x5b\x48\xfa\xf3\xc8\x2d\x34\x70\x76\xe4\x67\x00\x00\x00\xff\xff\x45\x1d\x9a\xe0\x24\x04\x00\x00")

func clarchTemplatesHandlerHttpHander_testTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesHandlerHttpHander_testTpl,
		"clarch/templates/handler/http/hander_test.tpl",
	)
}

func clarchTemplatesHandlerHttpHander_testTpl() (*asset, error) {
	bytes, err := clarchTemplatesHandlerHttpHander_testTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/handler/http/hander_test.tpl", size: 1060, mode: os.FileMode(420), modTime: time.Unix(1523351651, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesHandlerHttpHttpTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x95\xdf\x4f\xdb\x30\x10\xc7\x9f\xed\xbf\xc2\xcb\xc3\x94\xa0\xce\x15\xaf\x9d\x78\x01\x2a\x60\x43\x50\x51\xba\x3d\x7b\xce\x91\x78\xa4\x8e\x67\x5f\xca\xa6\x2a\xff\xfb\x64\x3b\xfc\x28\x24\xb0\x8e\x4d\x1b\x2f\x34\xf6\xf9\x7b\x77\x9f\xef\xc9\x36\x42\x5e\x8b\x02\x58\x89\x68\x28\x55\x4b\x53\x5b\x64\x29\x25\x89\x06\x1c\xfb\xc5\x84\x52\x92\x14\x0a\xcb\xe6\x0b\x97\xf5\x72\xbc\x5e\xf3\x83\xc6\x5a\xd0\xb8\x70\x60\xdb\xf6\xc1\xc2\x05\x98\x3a\x2e\xcc\xae\x8b\xb6\x4d\x7e\xf7\xe0\xb8\x71\x20\x85\x83\xad\x05\x8c\xad\xbf\x82\xc4\x47\xe7\x0a\xa5\xdf\x15\xb5\x56\xd2\xff\x4a\x68\x46\x29\xc5\x1f\x06\xd8\x31\xa2\xf1\x12\x62\x09\x55\xc8\x7b\x2c\x74\x5e\x81\x65\x0e\x6d\x23\x91\xad\x29\xe9\x04\x79\xb7\x33\x8b\x9f\x94\xdc\x56\xba\x38\x60\x5d\xad\x7c\x43\x69\x11\x17\x69\x4b\xe9\x55\xa3\x25\x4b\xb1\x54\x8e\xed\x0c\x65\xcc\xd8\xa9\x72\x98\x4a\xb6\x53\x28\xcd\x0f\x6a\x8d\xf0\x1d\x33\x5f\xc0\x4d\x09\x16\xd8\x64\x8f\xbd\x5d\xd6\x39\x54\x9b\x59\xd6\x2d\x25\x95\x72\x38\x62\x60\xad\x0f\xf2\x59\xf8\x7d\x6d\x3c\xa8\x06\x89\x8c\x12\x75\x15\xc2\xde\xec\x31\xad\x2a\xaf\x4d\x24\xff\x30\x3f\x3f\x4b\xbd\xcb\x7c\x8e\x02\x1b\xb7\x2f\xf2\x0b\xf8\xd6\x40\xa7\x99\x51\x42\x2c\x60\x63\x35\x25\x2d\xa5\x3d\x07\xce\x3f\x8e\x98\x2f\x21\xfb\xf5\x56\xe7\x65\x7d\xd3\xd7\xaa\xca\xef\x5a\x98\x09\xeb\xe0\x24\x4f\x65\xf6\x12\x81\x93\x7c\xc2\x54\xde\x52\xa2\x10\x96\x83\x1c\x42\xca\x3f\xc6\x61\x00\x83\xaf\x60\x1b\x0c\x58\x5b\xe8\xe3\x60\x84\x15\x4b\x17\x3a\x0e\x31\xb3\xf0\xed\xbd\xee\x2a\xbf\x6d\xf0\x93\xa8\x54\x2e\x10\xf6\x95\xce\x43\x41\x72\xc4\xe2\xe1\xec\xfd\xab\xad\x5e\x3d\x37\x74\x16\xdc\x30\xeb\xd0\xd7\xea\x2f\x82\xb6\xe0\xb6\xe0\xbc\x30\x9e\xd1\x0b\xa0\x63\xd0\xbf\x21\xfd\x64\xee\x0f\xc3\xdc\x0f\x1b\x40\x09\x89\x63\x3f\x8a\x02\xcf\xb9\xd1\x75\xff\xff\xd8\x71\x08\x15\xf4\xdb\xd1\xcf\xe1\xa5\x0b\xa0\x83\xe1\xff\x3a\x20\x8f\xcd\x7b\x40\xa3\x4b\x1e\x6f\x82\xd7\x3a\x47\x24\xff\x6c\x15\x82\x8d\xff\x8e\x41\xe4\x60\x37\xe1\xdc\x73\x39\x83\x9b\x4d\x1e\x88\xa6\x63\x92\x16\x91\xc5\x54\x17\x4a\xc3\x88\x35\xf2\xd9\x37\x25\xb0\x2a\x03\x8f\x21\xca\xbe\x99\xfb\xae\x27\xac\x91\x11\xcc\x6a\xd7\x1f\x2b\xf8\x91\xad\x1b\x93\x26\x63\x61\xd4\x78\xb5\x9b\xf8\x61\xdb\xe5\x47\xd3\xcb\x34\xb9\x7b\x82\x5d\x32\x62\x65\x78\x3f\x7a\x77\xc7\x13\x95\x87\x08\x7f\xb3\xc6\x88\xd9\xf9\xfc\xa9\x40\xb8\x0c\xba\xfd\x45\xbf\x42\x9c\xd0\x18\x73\x38\x3d\x9d\x5e\x4e\x7b\xc3\xa2\x75\x1e\xe8\xcf\x00\x00\x00\xff\xff\xb8\xba\x2b\xb3\xb2\x08\x00\x00")

func clarchTemplatesHandlerHttpHttpTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesHandlerHttpHttpTpl,
		"clarch/templates/handler/http/http.tpl",
	)
}

func clarchTemplatesHandlerHttpHttpTpl() (*asset, error) {
	bytes, err := clarchTemplatesHandlerHttpHttpTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/handler/http/http.tpl", size: 2226, mode: os.FileMode(420), modTime: time.Unix(1524145304, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesHandlerHttpParamsTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x28\x29\x29\xe0\xe2\x2a\xa9\x2c\x48\x55\x08\x2e\xc9\x2f\x4a\x0d\x48\x2c\x4a\xcc\x2d\x56\x28\x2e\x29\x2a\x4d\x2e\x51\xa8\xe6\xaa\x85\x4a\x86\x16\xa4\x24\x96\x60\x91\x05\x04\x00\x00\xff\xff\x84\xb0\x4f\x09\x48\x00\x00\x00")

func clarchTemplatesHandlerHttpParamsTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesHandlerHttpParamsTpl,
		"clarch/templates/handler/http/params.tpl",
	)
}

func clarchTemplatesHandlerHttpParamsTpl() (*asset, error) {
	bytes, err := clarchTemplatesHandlerHttpParamsTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/handler/http/params.tpl", size: 72, mode: os.FileMode(420), modTime: time.Unix(1524145204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesModelTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcc\xb1\xae\x83\x30\x0c\x85\xe1\x19\x3f\x85\xe5\xf1\x0e\x3c\x00\xdb\x15\x5d\xba\x75\x68\x67\x12\x11\x0b\xa5\xc4\x24\x0d\x46\x2a\x42\xbc\x7b\x55\x85\xaa\x53\xe7\xff\x3b\x27\xd9\x7e\xb4\x03\xa3\x44\xc7\x01\xc0\x4b\x8a\x59\x91\xd4\x0b\x13\x80\xae\x89\x71\xdb\xea\xd6\x0a\x87\xcb\x38\xec\x3b\xce\x9a\x97\x5e\x71\x83\xea\xec\xd0\x4f\x8a\xe6\x3e\xc7\xa9\x21\xef\x08\x87\x98\xa5\xa1\x94\xbd\xd8\xbc\x76\x23\xaf\x64\x00\xaa\x36\xb3\x55\x76\xff\x8a\xef\xd7\xfa\xea\x85\xf1\xb3\xea\x4b\xeb\xac\x92\x81\xea\x96\xdc\x4f\xb9\x94\x76\xc8\x13\x07\x2e\xf2\xef\x4b\x0f\xe9\x4a\xeb\xac\x22\xcd\x8f\xd0\x90\x9f\x1c\x3f\xc9\xc0\x0e\xaf\x00\x00\x00\xff\xff\x4c\x82\xbf\x2f\xee\x00\x00\x00")

func clarchTemplatesModelTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesModelTpl,
		"clarch/templates/model.tpl",
	)
}

func clarchTemplatesModelTpl() (*asset, error) {
	bytes, err := clarchTemplatesModelTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/model.tpl", size: 238, mode: os.FileMode(420), modTime: time.Unix(1524144249, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesProjectConfigTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xd1\x6b\xdb\x3e\x10\x7e\x96\xfe\x0a\xfd\xf4\x50\xec\x52\x9c\xf4\x57\xd8\x82\x47\x1e\x42\xdb\xb1\x40\xb7\x19\xb6\x3d\x8d\x41\x15\xe7\xe2\x68\x71\x24\xf5\x24\xb7\xb4\x25\xff\xfb\x38\xc9\xc9\x9c\x31\xd6\x1a\x42\xac\xbb\xef\xfb\xee\xf4\xdd\x61\xa7\xea\x8d\x6a\x40\x38\xb4\x3f\xa1\x0e\x9c\xeb\xad\xb3\x18\x44\xc6\x99\x6c\x6d\x23\x39\x67\xb2\xd1\x61\xdd\x2d\x8a\xda\x6e\x47\x9b\xf1\xa6\x5b\x74\x66\xe4\x9c\xfc\x23\x01\xad\x87\xc7\xb5\x6e\xd6\xc1\x3e\x00\x8e\xc0\xdc\xd7\xd6\xac\x74\x13\x71\xb6\xe8\x16\x80\x85\xc5\x66\xf4\xa4\xdc\x5f\x42\xf4\xab\x2d\x82\xe4\x39\xe7\xf7\x0a\xc5\x65\x24\x8b\x53\x12\xe1\x3c\x3c\x3a\x10\xb3\x6a\x2e\x7c\xc0\xae\x0e\xe2\x99\xb3\x8a\xba\xf4\x01\xb5\x69\xc4\xed\x12\x56\xaa\x6b\x43\x29\x27\x93\xc9\x44\xde\xf2\x5d\x4f\xf9\xf8\xe8\xef\xda\x01\xe9\x83\xf5\x41\xd0\xb3\x27\x22\xdc\x75\x1a\x61\x59\xca\x80\x1d\x48\x71\x10\x3a\xff\xff\x6d\x31\x2e\xc6\xc5\xb9\xbc\xe5\xec\x9b\x07\x7c\x1d\x0d\xad\x0d\xc4\xa8\x94\xf7\x0f\x16\x97\x2f\x33\x5c\x8f\x24\xd6\x95\x0a\x6a\xa1\x3c\xbc\xa2\x0e\xd4\x1b\x6b\x00\x63\x2d\x72\x62\xd8\xdd\x01\x75\x71\x31\x7e\x33\x70\xe3\xc6\x36\x0d\x60\x6f\xc7\xf3\x3e\x4a\x0e\x0f\x2c\x9a\x55\x73\xce\x7a\xe4\xe9\x93\x72\x45\x9a\x04\x67\xd1\x4b\xd2\x5a\x75\xa6\x16\x59\x58\x6b\x9f\xc6\x93\x8b\x0a\xb5\x09\x59\x4e\x74\xe7\x8a\x78\x6a\x4d\x44\xe4\x07\xc2\xdc\xe8\x90\xa4\x12\x90\x86\xac\x9c\x16\xb1\x9e\x5e\x09\x40\x14\xe5\x54\x1c\xf6\xa6\xa8\xd0\xd6\xe0\x7d\x26\x95\xd3\xf2\x4c\x9c\x28\xa7\xf3\x77\x11\xf6\xdf\x54\x18\xdd\x92\x08\x6b\x6d\x53\xbc\x57\x41\xb5\x19\x20\xe6\x9c\xed\x78\x52\xde\xc6\xc1\xa7\x96\xff\xad\x1e\x91\xa4\x1f\x5f\x5e\x57\xa1\x5f\xce\xa9\x38\x21\x35\x42\xcd\xaa\x79\x29\x04\x5d\xe8\x8c\xb3\x64\x55\x99\x9a\xa0\x73\xb2\xb3\x14\x64\x44\x96\x0f\x6d\x8d\x25\x58\x1c\x41\x39\x15\xbf\xe3\x31\xcc\x6e\xe0\x1e\xda\x52\xec\x1f\x4a\x7f\x82\x87\x59\xb0\x5b\x5d\xc7\xdc\x2c\x64\x14\xbc\x82\x45\xd7\xc4\x40\x7e\x16\x89\x57\xf4\x6e\xdd\x16\x4c\x20\x3a\x2d\x4f\x4a\x5c\x9b\xda\x2e\xb5\x69\x7a\x51\x59\x5b\xe3\x6d\x0b\x72\x90\x05\x4c\x2d\x94\xfb\x7a\x03\xb1\x23\x40\xd6\x17\xfb\xa2\xb6\xae\x8d\x9a\x27\xc4\xd8\x1f\x87\x17\x61\x34\x7d\xad\xd2\x5d\xce\xc7\xe3\x44\x64\x5f\xd7\x80\xa0\x56\x81\xbc\x39\x44\x77\xe9\xef\x73\x17\x5c\x17\x2a\x15\xd6\xbe\x14\xdf\x7f\xa4\xdd\xee\xd5\xa4\x0f\x4b\xdb\x05\x79\x44\xb8\x46\xb4\xf8\x12\x0b\x10\x8f\x58\xbb\xbd\xfd\xc5\xd1\xd5\xfa\x53\xb4\x54\xc4\xb9\xd0\xc7\xa9\xb8\x54\x4e\x07\xd5\x5e\xda\xd6\x62\xcc\xf5\x24\x12\x41\x08\x1d\x9a\xb4\x11\x9c\xb1\x5d\x74\x67\xc7\x77\xfc\x57\x00\x00\x00\xff\xff\x16\x0a\xa5\x0c\x62\x05\x00\x00")

func clarchTemplatesProjectConfigTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesProjectConfigTpl,
		"clarch/templates/project/config.tpl",
	)
}

func clarchTemplatesProjectConfigTpl() (*asset, error) {
	bytes, err := clarchTemplatesProjectConfigTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/project/config.tpl", size: 1378, mode: os.FileMode(420), modTime: time.Unix(1523355320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesProjectHandlerTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x41\x4f\x83\x40\x10\x85\xcf\xcc\xaf\x18\x39\x18\x68\x2a\xbd\x6b\x7a\xd1\x8b\xf1\xa0\x26\x4d\xbc\x9a\x75\x19\x96\xb1\x74\x96\x0c\x43\xa3\x21\xfc\x77\x03\xb5\x46\x6e\xbd\xbd\x7d\x79\xdf\xbe\x37\xad\xf3\x7b\x17\x08\x5b\x8d\x9f\xe4\x0d\x80\x0f\x6d\x54\xc3\x0c\x92\x34\xb0\xd5\xfd\x47\xe1\xe3\x61\xe3\x3a\xd7\xed\xe9\xc8\xbe\xde\x84\x78\x74\x0d\x97\xce\xa2\xa6\xcb\x50\x60\xb9\x09\x51\xd8\x4f\x2a\x85\x1c\xc0\xbe\x5b\xc2\x47\x27\x65\x43\xfa\x7a\x6a\xc0\xce\xb4\xf7\x36\x8c\x00\x55\x2f\x1e\x33\xab\xb9\xc3\xd5\x32\x94\xe3\xdb\xa9\x83\xee\x59\xca\xa7\xdd\xcb\x73\xe6\x71\x15\x58\x8a\x87\x28\x46\x5f\xb6\xc6\x88\x2c\x46\x5a\x39\x4f\xc3\x98\x23\xa9\x46\xc5\x01\x12\xae\x26\x8d\xb7\x5b\xf4\xc5\x1f\x7c\x1d\xf3\xbb\xd9\xbe\xda\xa2\x70\x33\xe5\x12\x25\xeb\x55\x26\x17\x92\x11\x66\xf0\x7d\x7d\x66\xff\x1d\x59\x9c\xa7\xec\xe6\xe1\xd9\x05\x5f\xfd\xbe\x85\x1b\x18\xe1\x27\x00\x00\xff\xff\xa3\x28\x87\x2a\x62\x01\x00\x00")

func clarchTemplatesProjectHandlerTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesProjectHandlerTpl,
		"clarch/templates/project/handler.tpl",
	)
}

func clarchTemplatesProjectHandlerTpl() (*asset, error) {
	bytes, err := clarchTemplatesProjectHandlerTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/project/handler.tpl", size: 354, mode: os.FileMode(420), modTime: time.Unix(1523351651, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesProjectMiddlewareMiddlewareTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xdf\x6f\xdb\x36\x10\x7e\x96\xfe\x0a\x8e\x40\x07\x2a\x90\xe9\x01\x7b\x1b\xd0\x01\x6e\xda\xa2\x06\xe2\x2c\x8b\x1b\xec\xa1\x28\x0a\x86\x3a\x49\x9c\x25\x52\x3d\x9d\x92\xb8\x41\xfe\xf7\x81\xa4\x22\xcb\x4d\xda\xec\x41\x30\x7d\x77\xdf\xf7\xdd\x2f\xb2\x53\x7a\xa7\x2a\x60\xad\x29\x8a\x06\x6e\x15\x42\x9a\x9a\xb6\x73\x48\x4c\xa4\x09\x2f\x5b\xe2\x69\xc2\xc9\xb4\xc0\xd3\x34\x51\x03\xd5\x9b\x10\xc9\x78\x65\xa8\x1e\xae\xa5\x76\xed\xf2\xf7\x45\x5f\xab\x1d\x2c\x11\xf4\xce\x59\xc0\x45\xd1\xd6\x8b\x1e\xf0\x06\x70\xe9\x21\xcb\x5a\xd9\xa2\x01\x5c\x1e\x54\x3c\xeb\x8c\xa1\x32\x76\x51\x39\x6b\xb4\x3f\x05\x9f\x93\xc3\x35\xa0\x74\x58\x2d\xbf\xa9\xee\x19\x93\xff\xb4\xf3\x4c\x59\x9a\xd2\xbe\x7b\xac\x81\xf5\x84\x83\x26\x76\x3f\x4f\x57\x6e\x26\xe5\xd5\x40\xf5\x87\x98\x4f\xfa\x30\x22\x0f\xde\x75\xdb\x35\xcc\x58\x02\x2c\x95\x06\x4f\x72\xe6\xaa\xca\xd8\x4a\x68\x67\x4b\x76\xf2\x4d\x75\xf2\xd4\xd9\xd2\x54\x19\xab\x8c\x95\x23\xd3\xfb\xc1\xea\x34\xf1\xd4\x60\xc9\x68\x45\x20\x9e\xfa\x1f\xd2\xb4\x1c\xac\x66\xe7\x70\x7b\x10\x14\xea\x90\x0f\x7b\x29\xe1\xec\xfb\x4c\xef\xd3\x04\x81\x06\xb4\xec\xd7\x58\xfd\xfd\x8c\xee\x61\x52\x14\x54\x9b\x9e\x9d\xc4\x90\x8c\xfd\xef\x92\x3c\x7f\xe3\xaa\x0a\x30\x67\x5f\xd8\x1f\xaf\x99\x47\xc8\x37\x83\x69\x0a\x91\x4d\xd2\x5e\x42\x68\x76\xe2\xc1\xa7\xce\x12\xdc\x51\xe6\x91\x49\x4f\x0a\xc9\xc3\xfc\xfe\xc8\x73\x77\x2b\x32\x79\xf5\xf1\xd4\x43\x13\x2d\xb7\x40\x82\x47\x76\x9e\xb3\x78\x88\x9e\x73\xb8\x23\x91\xa5\x69\x92\x34\x8a\xc0\xea\xfd\xc4\xb1\x35\x56\x83\x08\xbc\xc1\xdf\x29\xaa\x43\x5e\xf2\x12\xbe\x0e\xd0\x93\xbc\xba\x3c\x93\x17\x8a\xea\x34\x49\x5a\xa0\xda\x15\xc7\xee\x4d\xb0\x79\xe6\xa0\x27\xd7\xb6\x74\x22\x4d\x92\xa4\x6c\x49\x6e\x3b\x34\x96\x4a\xc1\x5f\xf5\xec\x55\xcf\xf3\x27\xb8\x9c\x79\xc1\x2c\xf7\x00\xdf\xb6\x2d\xa1\xef\x23\xef\x10\x4a\x73\xc7\x73\xc6\x57\x6f\xcf\x17\xab\x8b\x35\x7f\x26\x46\x51\xcd\x7f\x44\x60\xba\xa0\x76\xda\x18\xb0\xb4\xbe\x10\xd9\xd3\x90\xa1\x07\x5c\xa8\x0a\x2c\x1d\x25\x76\xd5\x03\xae\xbc\x75\x8e\x59\x5b\x12\xbc\x27\x45\x43\xac\xe2\x1f\x34\x04\x28\xb7\xc1\x32\x0f\xfc\x68\x5a\x10\xf1\x7a\xe7\x2c\xb6\xf5\x89\x70\x6c\x23\xcf\x59\x3c\x1c\x02\xde\x0e\xa8\xc8\x38\x2b\xf8\x38\x26\x3f\xc6\x78\x9a\x82\xde\x1b\x68\x8a\xc8\xd4\xbf\xd9\xc7\xc3\x46\x75\x82\xd7\xa0\x8a\x30\xf8\x43\x29\x1f\x82\xe9\x65\xe8\xd7\x01\x70\x7f\xdc\x84\xcb\x33\xf9\xb7\xb7\x8e\xb5\x85\xdd\x30\x25\x6b\xc0\x0a\x2d\xdf\x21\x3a\xec\x33\xf6\x27\xfb\x2d\xac\x65\x52\x3a\x64\x5f\x72\x06\x88\x9b\xbe\xf2\xfb\x81\xca\x56\xc0\x1e\x23\xc7\x1f\x11\x97\x78\x5a\x95\x60\x15\x11\xe4\xf7\x34\x79\x48\xc3\x77\xb8\x66\x3f\x49\x7a\x07\x7b\xff\x30\x19\x5b\xe5\xac\x65\xad\xea\x3e\xc5\x7f\x9f\x3f\x7d\x8e\x87\x8c\x8d\xef\x99\x0c\x14\xb3\x9b\xed\x5b\xfd\xd7\xf5\xbf\xa0\xc9\xb3\xe4\x23\xcd\x8c\x1d\xfb\x5a\x35\x80\xa2\xcd\xb2\x29\x95\x1f\x07\xfd\x5c\x3c\x0a\x4d\xe1\x8f\x8f\xc0\xfc\xa6\x1b\x6b\x01\xbf\x03\xbc\xb3\xda\xf9\xd9\xf9\x9e\x3a\x0c\x7d\xf3\x4d\xde\xe5\xec\x46\x35\x03\xf4\x87\x26\xb7\xb1\xa9\x80\xe8\x6d\x81\x4b\xae\x8a\x62\x85\xa8\xf6\x62\x97\x4f\xbc\xc1\x70\x94\x87\x78\x46\x3d\x44\x3d\x23\x3e\xcd\xf8\xe6\xa0\x3c\x66\x12\xdd\xc9\xa8\xdc\x75\x60\xc7\x79\x89\x9b\x30\xd5\x30\xd6\xe4\xb1\x62\x6b\x9a\x30\xea\x2c\xf8\x4c\xe9\x35\xd8\x2f\xaf\xbd\x7d\x64\x1a\x03\x01\x71\xb6\x13\x47\x70\xbf\x20\xff\x05\x00\x00\xff\xff\xce\xa9\x7b\xae\x68\x07\x00\x00")

func clarchTemplatesProjectMiddlewareMiddlewareTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesProjectMiddlewareMiddlewareTpl,
		"clarch/templates/project/middleware/middleware.tpl",
	)
}

func clarchTemplatesProjectMiddlewareMiddlewareTpl() (*asset, error) {
	bytes, err := clarchTemplatesProjectMiddlewareMiddlewareTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/project/middleware/middleware.tpl", size: 1896, mode: os.FileMode(420), modTime: time.Unix(1523355479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesProjectRepositoryTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\x41\x4e\xc3\x30\x10\x45\xd7\x99\x53\x0c\x5d\x25\x15\x4a\xf7\xa0\x6e\x0a\xec\x51\xc5\x05\x12\xd7\x49\xa6\x8d\x3d\xd6\x64\x2c\xb9\x54\xb9\x3b\x72\x80\x82\x54\xb1\x60\x65\xf9\xfb\xfd\xf7\x1d\x1a\x73\x6a\x7a\x8b\x41\xf8\x68\x8d\x02\x90\x0b\x2c\x8a\xab\x9e\x74\x88\x6d\x6d\xd8\x6d\x8e\xe4\xdf\x87\xb8\xe9\x59\xdc\x0a\x40\xcf\xc1\xe2\xde\x06\x9e\x48\x59\xce\xaf\x9f\x45\x9c\x54\xa2\xd1\xcb\x0c\xd0\x45\x6f\xb0\xd4\x81\x26\x5c\xdf\x70\x15\xbe\x49\xe3\xa7\xc6\x28\xb1\x2f\x0f\x2d\xae\xb3\xb6\x7e\xde\xdd\x63\x87\xb9\x59\x6a\xba\x66\x15\x5a\x11\x96\xaf\x03\x2f\x50\x68\xc2\x87\x2d\x1e\xda\x7a\x67\x7b\xf2\x65\x05\x05\x75\xa8\xa9\x7e\x59\x80\xbb\x2d\x7a\x1a\x33\x57\x88\xd5\x28\xfe\xfa\x04\xc5\x0c\x0b\x6b\x45\xb2\xa1\x2b\x35\x55\x8f\xcb\xed\x57\x49\x53\xbd\xe7\x71\x6c\x1b\x73\xca\xea\xbf\xdc\xb7\xf2\x62\xfe\x99\xb4\xb2\xac\x65\xd9\x13\x3b\x47\xfa\xbf\x5f\x7e\x67\x9e\x46\x98\xe1\x23\x00\x00\xff\xff\x33\xd3\xef\x3d\x9f\x01\x00\x00")

func clarchTemplatesProjectRepositoryTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesProjectRepositoryTpl,
		"clarch/templates/project/repository.tpl",
	)
}

func clarchTemplatesProjectRepositoryTpl() (*asset, error) {
	bytes, err := clarchTemplatesProjectRepositoryTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/project/repository.tpl", size: 415, mode: os.FileMode(420), modTime: time.Unix(1524144817, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesRepositoryRepositoryTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\xc1\x6e\xdb\x30\x0c\x86\xcf\xd6\x53\x68\x3d\x14\x56\x10\x28\x3b\x6f\xe8\xc5\xf5\x76\x1c\x8a\x76\xc5\x0e\xc3\x0e\x9a\xc3\x24\x6a\x6c\xc9\xa0\xe9\xb6\x99\xa1\x77\x1f\x68\x7b\xae\xd3\xce\x85\x91\x01\xc5\xae\x12\x7f\xf2\xff\x48\x4a\xa5\xc9\xf6\x66\x0b\x12\xa1\xf4\x95\x25\x8f\x07\x21\x6c\x51\x7a\x24\x19\x8b\xe8\x6c\x6b\x69\x57\xff\xd4\x99\x2f\x56\x4d\xa3\x2f\x6b\x44\x70\x74\x5b\x01\x86\x30\x3a\xb8\x86\xd2\x87\xb0\x2a\xfc\x1a\xf2\xb3\x63\xd5\x9d\x75\xbf\x76\xf5\x6a\xeb\xb1\x38\x13\x4a\x08\x3a\x94\x20\x59\x69\x0a\xc8\xaf\xf6\xdb\x10\xae\x87\xca\xd2\x3a\x02\xdc\x98\x0c\x64\x23\xa2\xcf\xd6\xad\x93\x43\xbc\x68\xb3\xea\x23\x89\x92\xf1\xf7\x1f\x7f\xbb\x58\x4a\x40\xf4\xa8\x58\x8d\x15\x4d\xcb\x5f\x17\xdf\x90\x47\x38\x4d\x7a\x5b\xae\x0d\x9d\xa8\x4d\x21\x87\x49\x6d\x1b\x24\xc2\x53\x07\x9f\x37\xaf\x22\xac\x33\xe2\xce\x95\xe8\xef\x20\x23\xfd\x74\x79\xd5\x9d\x88\x28\x4d\xe4\x82\x67\xa1\xd3\x84\x73\x6d\x6a\x97\xc9\x2f\xf0\x30\x31\x90\x78\x14\xae\x26\xa7\xd6\x88\x08\x81\x6a\x74\xf2\xfc\xa5\xad\x26\x4d\xc2\x50\x29\xa6\x9d\xad\xe4\xe2\x65\x94\x92\xfd\xb4\x1f\x76\x80\x20\x4f\x9a\x39\xfb\xb0\x04\x85\xfc\x70\x21\x0b\xb3\x87\xc9\xf0\xf7\x4a\x44\x76\xc3\x2a\x0e\x65\x4b\x3a\x4d\xf4\x37\xae\xdc\xd5\x57\x9a\xdd\xc4\xe7\x9c\x4d\xe9\x4f\x9c\xfd\x63\x1b\xfe\xee\x42\x3a\x9b\x73\xa1\x3f\xc4\xce\xe6\x6d\x7d\x11\x85\xa1\x0b\x2c\x5b\xf2\xcd\x3c\xee\x6e\x4f\x5f\x05\x9f\x8b\x3d\xf4\xff\x38\xb4\x09\x33\x80\xb1\xa2\xf8\x2d\x80\xbb\xb7\x75\x6f\xf2\xfa\x74\xdc\x63\x96\xaf\x68\x5c\x65\x32\xb2\xde\xc5\x3d\xdc\x52\xb2\x8d\x98\x1e\x47\xeb\xdb\xea\xc7\x28\xf4\xa8\x2f\x11\xf8\xb5\xb6\x6e\x7a\x70\x11\x05\x35\x07\x7e\xa0\x6f\xc5\xb3\xf1\xfb\xff\xe1\x3f\xe1\xbf\x31\xf7\x6f\x4a\xdf\xff\x70\xe3\x65\x1f\x19\xfb\xf7\x35\xee\xf3\xcf\xd8\xe3\xe7\x1c\x1d\xc0\xef\x00\x00\x00\xff\xff\xc9\xcc\xbd\x88\x0e\x07\x00\x00")

func clarchTemplatesRepositoryRepositoryTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesRepositoryRepositoryTpl,
		"clarch/templates/repository/repository.tpl",
	)
}

func clarchTemplatesRepositoryRepositoryTpl() (*asset, error) {
	bytes, err := clarchTemplatesRepositoryRepositoryTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/repository/repository.tpl", size: 1806, mode: os.FileMode(420), modTime: time.Unix(1524145788, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clarchTemplatesUsecaseUsecaseTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x5f\x6b\xdb\x30\x10\x7f\x96\x3e\xc5\xcd\x0f\xc5\x2e\xc5\x7d\xcf\xc8\xcb\x36\x06\x85\x11\x46\x47\x9e\xc6\x18\x9e\x7d\x4e\x44\x1d\xc9\x9c\xa4\x65\xc1\xf8\xbb\x0f\x49\x4e\x1b\x75\x4e\x93\x38\x2c\x4f\x91\x7c\xf7\xbb\xdf\x9f\xb3\xdb\xa2\x7c\x2a\x56\x08\x56\x63\x59\x68\xe4\x5c\x6c\x5a\x45\x06\x52\xce\x12\x24\x52\xa4\x13\xce\x92\x95\x30\x6b\xfb\x2b\x2f\xd5\xe6\xbe\xeb\xf2\x8f\x96\x08\xa5\x59\x6a\xa4\xbe\x3f\xb8\x78\xc4\x56\x85\x8b\xaf\x4f\xab\xbe\x4f\x38\xdb\xff\x75\x4f\x60\x1a\xca\x3d\x61\xab\xb4\x30\x8a\x76\x09\xcf\x38\x37\xbb\x16\xc1\x55\x17\x1b\x6c\x7c\xc5\x32\x50\x07\x21\x0d\x52\x5d\x94\x08\x1d\x67\x5f\x84\x36\xe9\xed\x46\x55\xd8\xe4\x51\x75\x06\xe9\xf7\x1f\x63\x0f\xee\xc0\xeb\xcd\x38\xfb\xb6\x56\xdb\x63\xbd\x27\x3a\x8d\x22\x9c\xd6\xba\x6c\xab\xc2\x4c\xec\xfd\x84\x0d\x1e\xed\xf5\x45\xbc\x7f\x71\x2e\x32\x4d\x1b\xb2\xa5\x71\x8e\x45\x59\x1d\x1e\x62\xc0\xc7\xe7\x38\x1c\x66\x6d\x65\x09\x0b\xdc\x8e\x05\x92\xd2\x59\x30\xd9\x78\x9a\x1d\x67\x84\xc6\x92\x84\x9b\x57\x9c\x3b\xce\x22\xb2\x33\xa0\x3b\xce\xfa\x67\x3a\xa9\x59\x0b\x0d\xb7\xaf\xba\x32\xf0\x2b\xb1\x5d\x23\x21\x4c\x5a\x8c\x40\x49\xfb\x23\xcc\xe6\xe0\xc6\xe4\x91\xc2\xcf\x42\x56\x1f\x76\x61\x46\xc6\x99\xa8\x7d\xe9\xbb\x39\x48\xd1\xb8\xee\xbd\x22\x29\x1a\x8f\xe2\x58\xef\xef\x3c\xb2\x14\xcd\x49\x19\x7e\x3b\xdf\x94\x71\xad\x08\xd2\xe6\xff\xab\xf0\x6f\xca\xef\xa2\xb1\x57\xc8\xf0\x23\xff\x55\x70\x80\x9d\x9d\x24\x32\xbc\x77\x57\x31\x09\x69\xcc\xe6\x70\x33\x52\xe8\x2d\x7b\xa8\x66\xe0\x47\xe4\x0f\x95\x5f\x56\x18\x7e\xa2\x86\x9f\x67\x87\xf1\xde\xd5\xcd\x5f\x82\xf0\xc7\xc0\x43\xe7\x0b\xdc\xa6\xc9\x42\x19\xa8\x95\x95\x55\x92\x8d\x07\x75\x2a\xfd\x43\x3b\xce\x0d\xff\xf2\xf4\x87\x0f\xd6\x5b\x5b\xec\x55\xb9\x89\xf8\x47\x68\x83\x55\xcc\xd9\x6a\xa4\xcb\xb6\xf5\xa8\x4b\x8e\xff\xd0\x35\xea\xc8\xc0\x75\xa0\x11\x32\x08\xf0\x31\x7a\xe4\x44\x30\xe1\x6f\x00\x00\x00\xff\xff\x34\xb8\xe1\xc8\x5d\x07\x00\x00")

func clarchTemplatesUsecaseUsecaseTplBytes() ([]byte, error) {
	return bindataRead(
		_clarchTemplatesUsecaseUsecaseTpl,
		"clarch/templates/usecase/usecase.tpl",
	)
}

func clarchTemplatesUsecaseUsecaseTpl() (*asset, error) {
	bytes, err := clarchTemplatesUsecaseUsecaseTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clarch/templates/usecase/usecase.tpl", size: 1885, mode: os.FileMode(420), modTime: time.Unix(1524145877, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"clarch/templates/handler/http/hander_test.tpl": clarchTemplatesHandlerHttpHander_testTpl,
	"clarch/templates/handler/http/http.tpl": clarchTemplatesHandlerHttpHttpTpl,
	"clarch/templates/handler/http/params.tpl": clarchTemplatesHandlerHttpParamsTpl,
	"clarch/templates/model.tpl": clarchTemplatesModelTpl,
	"clarch/templates/project/config.tpl": clarchTemplatesProjectConfigTpl,
	"clarch/templates/project/handler.tpl": clarchTemplatesProjectHandlerTpl,
	"clarch/templates/project/middleware/middleware.tpl": clarchTemplatesProjectMiddlewareMiddlewareTpl,
	"clarch/templates/project/repository.tpl": clarchTemplatesProjectRepositoryTpl,
	"clarch/templates/repository/repository.tpl": clarchTemplatesRepositoryRepositoryTpl,
	"clarch/templates/usecase/usecase.tpl": clarchTemplatesUsecaseUsecaseTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"clarch": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"handler": &bintree{nil, map[string]*bintree{
				"http": &bintree{nil, map[string]*bintree{
					"hander_test.tpl": &bintree{clarchTemplatesHandlerHttpHander_testTpl, map[string]*bintree{}},
					"http.tpl": &bintree{clarchTemplatesHandlerHttpHttpTpl, map[string]*bintree{}},
					"params.tpl": &bintree{clarchTemplatesHandlerHttpParamsTpl, map[string]*bintree{}},
				}},
			}},
			"model.tpl": &bintree{clarchTemplatesModelTpl, map[string]*bintree{}},
			"project": &bintree{nil, map[string]*bintree{
				"config.tpl": &bintree{clarchTemplatesProjectConfigTpl, map[string]*bintree{}},
				"handler.tpl": &bintree{clarchTemplatesProjectHandlerTpl, map[string]*bintree{}},
				"middleware": &bintree{nil, map[string]*bintree{
					"middleware.tpl": &bintree{clarchTemplatesProjectMiddlewareMiddlewareTpl, map[string]*bintree{}},
				}},
				"repository.tpl": &bintree{clarchTemplatesProjectRepositoryTpl, map[string]*bintree{}},
			}},
			"repository": &bintree{nil, map[string]*bintree{
				"repository.tpl": &bintree{clarchTemplatesRepositoryRepositoryTpl, map[string]*bintree{}},
			}},
			"usecase": &bintree{nil, map[string]*bintree{
				"usecase.tpl": &bintree{clarchTemplatesUsecaseUsecaseTpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

